@Module
package org.w3c.dom.css;

import org.w3c.css.DocumentStyle;
import org.w3c.css.MediaList;
import org.w3c.css.StyleSheet;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Element;
import org.w3c.views.AbstractView;
 

// Introduced in DOM Level 2:
public native interface CSSRuleList {
// readonly attribute unsigned 
	long length{}
	CSSRule item(final /*unsigned*/ long index);
}

// Introduced in DOM Level 2:
public native interface CSSRule {

 // RuleType 
// const unsigned 
	short UNKNOWN_RULE = 0;
// const unsigned 
	short STYLE_RULE = 1;
// const unsigned 
	short CHARSET_RULE = 2;
// const unsigned 
	short IMPORT_RULE = 3;
// const unsigned 
	short MEDIA_RULE = 4;
// const unsigned 
	short FONT_FACE_RULE = 5;
// const unsigned 
	short PAGE_RULE = 6;

// readonly attribute unsigned 
	native short type{}
// attribute 
	native String cssText{}
 // throws DOMException) on setting

// readonly attribute 
	native CSSStyleSheet parentStyleSheet{}
// readonly attribute 
	native CSSRule parentRule{}
}

// Introduced in DOM Level 2:
public native interface CSSStyleRule extends CSSRule {
// attribute 
	native String selectorText{}
 // throws DOMException) on setting

// readonly attribute 
	native CSSStyleDeclaration style{}
}

// Introduced in DOM Level 2:
public native interface CSSMediaRule extends CSSRule {
// readonly attribute stylesheets::
	native MediaList media{}
// readonly attribute 
	native CSSRuleList cssRules{}
	/*unsigned*/ long insertRule(final String rule, final /*unsigned*/ long index) throws DOMException;
	void deleteRule(final /*unsigned*/ long index) throws DOMException;
}

// Introduced in DOM Level 2:
public native interface CSSFontFaceRule extends CSSRule {
// readonly attribute 
	native CSSStyleDeclaration style{}
}

// Introduced in DOM Level 2:
public native interface CSSPageRule extends CSSRule {
// attribute 
	String selectorText{}
 // throws DOMException) on setting

// readonly attribute 
	native CSSStyleDeclaration style{}
}

// Introduced in DOM Level 2:
public native interface CSSImportRule extends CSSRule {
// readonly attribute 
	native String href{}
// readonly attribute stylesheets::
	native MediaList media{}
// readonly attribute 
	native CSSStyleSheet styleSheet{}
}

// Introduced in DOM Level 2:
public native interface CSSCharsetRule extends CSSRule {
// attribute 
	native String encoding{}
 // throws DOMException) on setting

}

// Introduced in DOM Level 2:
public native interface CSSUnknownRule extends CSSRule {
}

// Introduced in DOM Level 2:
public native interface CSSStyleDeclaration extends CSS2Properties, Transition, Animation, Transform{
// attribute 
	native String cssText{}
 // throws DOMException) on setting

	String getPropertyValue(final String propertyName);
	CSSValue getPropertyCSSValue(final String propertyName);
	String removeProperty(final String propertyName) throws DOMException;
	String getPropertyPriority(final String propertyName);
	void setProperty(final String propertyName, final String value, final String priority) throws DOMException;
//	readonly attribute /*unsigned*/ 
	native long length{}
	String item(final /*unsigned*/ long index);
//	readonly attribute 
	native CSSRule parentRule{}
}

// Introduced in DOM Level 2:
public native interface CSSValue {

 // UnitTypes
// const unsigned 
	static final short CSS_INHERIT = 0;
// const unsigned 
	static final short CSS_PRIMITIVE_VALUE = 1;
// const unsigned 
	static final short CSS_VALUE_LIST = 2;
// const unsigned 
	static final short CSS_CUSTOM = 3;

// attribute 
	native String cssText{}
 // throws DOMException) on setting

// readonly attribute unsigned 
	native short cssValueType{}
}

// Introduced in DOM Level 2:
public native interface CSSPrimitiveValue extends CSSValue {

 // UnitTypes
// const unsigned 
	static final short CSS_UNKNOWN = 0;
// const unsigned 
	static final short CSS_NUMBER = 1;
// const unsigned 
	static final short CSS_PERCENTAGE = 2;
// const unsigned 
	static final short CSS_EMS = 3;
// const unsigned 
	static final short CSS_EXS = 4;
// const unsigned 
	static final short CSS_PX = 5;
// const unsigned 
	static final short CSS_CM = 6;
// const unsigned 
	static final short CSS_MM = 7;
// const unsigned 
	static final short CSS_IN = 8;
// const unsigned 
	static final short CSS_PT = 9;
// const unsigned 
	static final short CSS_PC = 10;
// const unsigned 
	static final short CSS_DEG = 11;
// const unsigned 
	static final short CSS_RAD = 12;
// const unsigned 
	static final short CSS_GRAD = 13;
// const unsigned 
	static final short CSS_MS = 14;
// const unsigned 
	static final short CSS_S = 15;
// const unsigned 
	static final short CSS_HZ = 16;
// const unsigned 
	static final short CSS_KHZ = 17;
// const unsigned 
	static final short CSS_DIMENSION = 18;
// const unsigned 
	static final short CSS_STRING = 19;
// const unsigned 
	static final short CSS_URI = 20;
// const unsigned
	static final short CSS_IDENT = 21;
// const unsigned 
	static final short CSS_ATTR = 22;
// const unsigned
	static final short CSS_COUNTER = 23;
// const unsigned 
	static final short CSS_RECT = 24;
// const unsigned 
	static final short CSS_RGBCOLOR = 25;

// readonly attribute unsigned 
	short primitiveType{}
	void setFloatValue(final /*unsigned*/ short unitType, final float floatValue) throws DOMException;
	float getFloatValue(final /*unsigned*/ short unitType) throws DOMException;
	void setStringValue(final /*unsigned*/ short stringType, final String stringValue) throws DOMException;
	String getStringValue() throws DOMException;
	Counter getCounterValue() throws DOMException;
	Rect getRectValue() throws DOMException;
	RGBColor getRGBColorValue() throws DOMException;
}

// Introduced in DOM Level 2:
public native interface CSSValueList extends CSSValue {
// readonly attribute unsigned 
	long length{}
	CSSValue item(final /*unsigned*/ long index);
}

// Introduced in DOM Level 2:
public native interface RGBColor {
// readonly attribute 
	CSSPrimitiveValue red{}
// readonly attribute 
	CSSPrimitiveValue green{}
// readonly attribute 
	CSSPrimitiveValue blue{}
}

// Introduced in DOM Level 2:
public native interface Rect {
// readonly attribute 
	CSSPrimitiveValue top{}
// readonly attribute 
	CSSPrimitiveValue right{}
// readonly attribute 
	CSSPrimitiveValue bottom{}
// readonly attribute 
	CSSPrimitiveValue left{}
}

// Introduced in DOM Level 2:
public native interface Counter {
// readonly attribute 
	String identifier{}
// readonly attribute 
	String listStyle{}
// readonly attribute 
	String separator{}
}

// Introduced in DOM Level 2:
public native interface ElementCSSInlineStyle {
// readonly attribute 
	CSSStyleDeclaration style{}
}

// Introduced in DOM Level 2:
public native interface CSS2Properties {
// attribute 
	String azimuth{}
 // throws DOMException) on setting

// attribute 
	String background{}
 // throws DOMException) on setting

// attribute 
	String backgroundAttachment{}	//background-attachment
 // throws DOMException) on setting

// attribute 
	String backgroundColor{}		//background-color
 // throws DOMException) on setting

// attribute 
	String backgroundImage{}		//background-image
 // throws DOMException) on setting

// attribute 
	String backgroundPosition{}		//background-position
 // throws DOMException) on setting

// attribute 
	String backgroundRepeat{}	//background-repeat
 // throws DOMException) on setting

// attribute 
	String border{}
 // throws DOMException) on setting

// attribute 
	String borderCollapse{}		//border-collapse
 // throws DOMException) on setting

// attribute 
	String borderColor{}	//border-color
 // throws DOMException) on setting

// attribute 
	String borderSpacing{}	//border-spacing
 // throws DOMException) on setting

// attribute 
	String borderStyle{}	//border-style
 // throws DOMException) on setting

// attribute 
	String borderTop{}	//border-top
 // throws DOMException) on setting

// attribute 
	String borderRight{}	//border-right
 // throws DOMException) on setting

// attribute 
	String borderBottom{}	//border-bottom
 // throws DOMException) on setting

// attribute 
	String borderLeft{}	//border-left
 // throws DOMException) on setting

// attribute 
	String borderTopColor{}	//border-top-color
 // throws DOMException) on setting

// attribute 
	String borderRightColor{}	//border-right-color
 // throws DOMException) on setting

// attribute
	String borderBottomColor{}	//border-bottom-color
 // throws DOMException) on setting

// attribute 
	String borderLeftColor{}		//border-left-color
 // throws DOMException) on setting

// attribute 
	String borderTopStyle{}		//border-top-style
 // throws DOMException) on setting

// attribute 
	String borderRightStyle{}		//border-right-style
 // throws DOMException) on setting

// attribute 
	String borderBottomStyle{}	//border-bottom-style
 // throws DOMException) on setting

// attribute 
	String borderLeftStyle{}		//border-left-style
 // throws DOMException) on setting

// attribute 
	String borderTopWidth{}		//border-top-width
 // throws DOMException) on setting

// attribute 
	String borderRightWidth{}		//border-right-width
 // throws DOMException) on setting

// attribute 
	String borderBottomWidth{}		//border-bottom-width
 // throws DOMException) on setting

// attribute 
	String borderLeftWidth{}	//border-left-width
 // throws DOMException) on setting

// attribute 
	String borderWidth{}		//border-width
 // throws DOMException) on setting

// attribute
	String bottom{}
 // throws DOMException) on setting

// attribute 
	String captionSide{}		//caption-side
 // throws DOMException) on setting

// attribute
	String clear{}
 // throws DOMException) on setting

// attribute 
	String clip{}
 // throws DOMException) on setting

// attribute
	String color{}
 // throws DOMException) on setting

// attribute 
	String content{}
 // throws DOMException) on setting

// attribute 
	String counterIncrement{}	//counter-increment
 // throws DOMException) on setting

// attribute 
	String counterReset{}	//counter-reset
 // throws DOMException) on setting

// attribute 
	String cue{}
 // throws DOMException) on setting

// attribute 
	String cueAfter{}		//cue-after
 // throws DOMException) on setting

// attribute 
	String cueBefore{}		//cue-before
 // throws DOMException) on setting

// attribute 
	String cursor{}
 // throws DOMException) on setting

// attribute 
	String direction{}
 // throws DOMException) on setting

// attribute 
	String display{}
 // throws DOMException) on setting

// attribute 
	String elevation{}
 // throws DOMException) on setting

// attribute 
	String emptyCells{}		//empty-cells
 // throws DOMException) on setting

// attribute 
	String cssFloat{}		//css-float
 // throws DOMException) on setting

// attribute 
	String font{}
 // throws DOMException) on setting

// attribute 
	String fontFamily{}		//font-family
 // throws DOMException) on setting

// attribute 
	String fontSize{}		//font-size
 // throws DOMException) on setting

// attribute 
	String fontSizeAdjust{}		//font-size-adjust
 // throws DOMException) on setting

// attribute 
	String fontStretch{}		//font-stretch
 // throws DOMException) on setting

// attribute 
	String fontStyle{}		//font-style
 // throws DOMException) on setting

// attribute 
	String fontVariant{}		//font-variant
 // throws DOMException) on setting

// attribute 
	String fontWeight{}		//font-weight
 // throws DOMException) on setting

// attribute 
	String height{}
 // throws DOMException) on setting

// attribute 
	String left{}
 // throws DOMException) on setting

// attribute 
	String letterSpacing{}	//letter-spacing
 // throws DOMException) on setting

// attribute 
	String lineHeight{}		//line-height
 // throws DOMException) on setting

// attribute 
	String listStyle{}		//list-style
 // throws DOMException) on setting

// attribute 
	String listStyleImage{}		//list-style-image
 // throws DOMException) on setting

// attribute 
	String listStylePosition{}	//list-style-position
 // throws DOMException) on setting

// attribute 
	String listStyleType{}	//list-style-type
 // throws DOMException) on setting

// attribute 
	String margin{}
 // throws DOMException) on setting

// attribute 
	String marginTop{}	//margin-top
 // throws DOMException) on setting

// attribute 
	String marginRight{}	//margin-right
 // throws DOMException) on setting

// attribute 
	String marginBottom{}	//margin-bottom
 // throws DOMException) on setting

// attribute 
	String marginLeft{}		//margin-left
 // throws DOMException) on setting

// attribute 
	String markerOffset{}	//marker-offset
 // throws DOMException) on setting

// attribute 
	String marks{}
 // throws DOMException) on setting

// attribute 
	String maxHeight{}	//max-height
 // throws DOMException) on setting

// attribute 
	String maxWidth{}	//max-width
 // throws DOMException) on setting

// attribute 
	String minHeight{}	//min-height
 // throws DOMException) on setting

// attribute 
	String minWidth{}	//min-width
 // throws DOMException) on setting

// attribute 
	String orphans{}
 // throws DOMException) on setting

// attribute 
	String outline{}
 // throws DOMException) on setting

// attribute 
	String outlineColor{}	//outline-color
 // throws DOMException) on setting

// attribute 
	String outlineStyle{}		//outline-style
 // throws DOMException) on setting

// attribute 
	String outlineWidth{}	//outline-width
 // throws DOMException) on setting

// attribute 
	String overflow{}
 // throws DOMException) on setting

// attribute 
	String padding{}
 // throws DOMException) on setting

// attribute 
	String paddingTop{}	//padding-top
 // throws DOMException) on setting

// attribute 
	String paddingRight{}	//padding-right
 // throws DOMException) on setting

// attribute 
	String paddingBottom{}	//padding-bottom
 // throws DOMException) on setting

// attribute 
	String paddingLeft{}	//padding-left
 // throws DOMException) on setting

// attribute 
	String page{}
 // throws DOMException) on setting

// attribute 
	String pageBreakAfter{}		//page-break-after
 // throws DOMException) on setting

// attribute 
	String pageBreakBefore{}	//page-break-before
 // throws DOMException) on setting

// attribute 
	String pageBreakInside{}	//page-break-inside
 // throws DOMException) on setting

// attribute 
	String pause{}
 // throws DOMException) on setting

// attribute 
	String pauseAfter{}		//pause-after
 // throws DOMException) on setting

// attribute 
	String pauseBefore{}		//pause-before
 // throws DOMException) on setting

// attribute
	String pitch{}
 // throws DOMException) on setting

// attribute 
	String pitchRange{}		//pitch-range
 // throws DOMException) on setting

// attribute 
	String playDuring{}		//play-during
 // throws DOMException) on setting

// attribute 
	String position{}
 // throws DOMException) on setting

// attribute 
	String quotes{}
 // throws DOMException) on setting

// attribute
	String richness{}
 // throws DOMException) on setting

// attribute 
	String right{}
 // throws DOMException) on setting

// attribute 
	String size{}
 // throws DOMException) on setting

// attribute
	String speak{}
 // throws DOMException) on setting

// attribute 
	String speakHeader{}	//speak-header
 // throws DOMException) on setting

// attribute 
	String speakNumeral{}	//speak-numeral
 // throws DOMException) on setting

// attribute 
	String speakPunctuation{}	//speak-punctuation
 // throws DOMException) on setting

// attribute 
	String speechRate{}		//speech-rate
 // throws DOMException) on setting

// attribute 
	String stress{}
 // throws DOMException) on setting

// attribute 
	String tableLayout{}	//table-layout
 // throws DOMException) on setting

// attribute 
	String textAlign{}	//text-align
 // throws DOMException) on setting

// attribute 
	String textDecoration{}	//text-decoration
 // throws DOMException) on setting

// attribute
	String textIndent{}
 // throws DOMException) on setting

// attribute 
	String textShadow{}		//text-show
 // throws DOMException) on setting

// attribute 
	String textTransform{}			//text-transform
 // throws DOMException) on setting

// attribute 
	String top{}
 // throws DOMException) on setting

// attribute 
	String unicodeBidi{}		//unicode-bidi
 // throws DOMException) on setting

// attribute 
	String verticalAlign{}		//vertical-align
 // throws DOMException) on setting

// attribute 
	String visibility{}
 // throws DOMException) on setting

// attribute
	public native String voiceFamily{}   //voice-family
 // throws DOMException) on setting

// attribute 
	public native String volume{}
 // throws DOMException) on setting

// attribute 
	public native String whiteSpace{}
 // throws DOMException) on setting

// attribute 
	public native String widows{}
 // throws DOMException) on setting

// attribute 
	public native String width{&;+;}
 // throws DOMException) on setting

// attribute 
	public native String wordSpacing{}
 // throws DOMException) on setting

// attribute 
	public native String zIndex{}
 // throws DOMException) on setting
	
	//SVG
//	Font properties: 
//	public native String  font{ }
//	public native String  fontFamily{ }  //font-family
//	public native String  fontSize{ }  	//font-size
//	public native String  fontSizeAdjust{ } //font-size-adjust
//	public native String  fontStretch{ }	//font-stretch
//	public native String  fontStyle{ }		//font-style
//	public native String  fontVariant{ }	//font-variant
//	public native String  fontWeight{ }	//font-weight
//
////	• Text properties: 
//	public native String  direction{ }
//	public native String  letterSpacing{ }		//letter-spacing
//	public native String  textDecoration{ }		//text-decoration
//	public native String  unicodeBidi{ }		//unicode-bidi
//	public native String  wordSpacing{ }		//word-spacing
//
////	• Other properties for visual media: 
//	public native String  clip{ }	//clip //only applicable to outermost svg element.
//	public native String  color{ } //used to provide a potential indirect value (currentColor) for the ‘fill’, ‘stroke’, ‘stop-color’, ‘flood-color’ and ‘l{ }ghting-color’ properties. (The SVG properties which support color allow a color specification which is extended from CSS2 to accommodate color definitions in arbitrary color spaces. See Color profile descriptions.)
//	public native String  cursor{ }
//	public native String  display{ }
//	public native String  overflow{ } //only applicable to elements which establish a new viewport.
//	public native String  visibility{ }


//	The following SVG properties are not defined in CSS2. The complete normative definitions for these properties are found in this specification:
//	Clipping, //Masking and Compositing properties: public native String  clip-path’
	public native String  clipRule{ }		//clip-rule
	public native String  mask{ }
	public native String  opacity{ }

//	• Filter Effects properties: 
	public native String  enableBackground{ }	//enable-background
	public native String  filter{ }
	public native String  floodColor{ }			//flood-color
	public native String  floodOpacity{ }		//flood-opacity
	public native String  lightingColor{ }		//lighting-color

//	• Gradient properties: 
	public native String  stopColor{ }			//stop-color
	public native String  stopOpacity{ }		//stop-opacity

//	• Interactivity properties: 
	public native String  pointerEvents{ }		//pointer-events

//	• Color and Painting properties: 
	public native String  colorInterpolation{ }	//color-interpolation
	public native String  colorInterpolationFilters{ }		//color-interpolation-filters
	public native String  colorProfile{ }		//color-profile
	public native String  colorRendering{ }		//color-rendering
	public native String  fill{ }				//fill
	public native String  fillOpacity{ }		//fill-opacity
	public native String  fillRule{ }			//fill-rule
	public native String  imageRendering{ }	//image-rendering
	public native String  marker{ }				//marker
	public native String  markerEnd{ }			//marker-end
	public native String  markerMid{ }			//marker-mid
	public native String  markerStart{ }		//marker-start
	public native String  shapeRendering{ }	//shape-rendering
	public native String  stroke{ }				//stroke
	public native String  strokeDasharray{ }	//stroke-dasharray
	public native String  strokeDashoffset{ }	//stroke-dashoffset
	public native String  strokeLinecap{ }		//stroke-linecap
	public native String  strokeLinejoin{ }	//stroke-linejoin
	public native String  strokeMiterlimit{ }	//stroke-miterlimit
	public native String  strokeOpacity{ }		//stroke-opacity
	public native String  strokeWidth{ }		//stroke-width
	public native String  textRendering{ }		//text-rendering

//	• Text properties: 
	public native String  alignmentBaseline{ }	//alignment-baseline
	public native String  baselineShift{ }		//baseline-shift
	public native String  dominantBaseline{ }	//dominant-baseline
	public native String  glyphOrientationHorizontal{ } //glyph-orientation-horizontal
	public native String  glyphOrientationVertical{ }	//glyph-orientation-vertical
	public native String  kerning{ }
	public native String  textAnchor{ }	//text-anchor
	public native String  writingMode{ }	//writing-mode
}

//Introduced in CSS 3
public native interface Transition {
	public native String transition{}
	public native String transitionDelay{}
	public native String transitionDuration{}
	public native String transitionProperty{}
	public native String transitionTimingFunction{}
}

public native interface Animation {
	public native String animation{}
	public native String animationName{}
	public native String animationDuration{}
	public native String animationTimingFunction{}
	public native String animationDelay{}
	public native String animationIterationCount{}
	public native String animationDirection{}
	public native String animationFillMode{}
	public native String animationPlayState{}
}

//Introduced in CSS 3
public native interface Transform {
	public native String transform{}
	public native String transformOrigin{}
	public native String transformStyle{}
	public native String perspective{}
	public native String perspectiveOrigin{}
	public native String backfaceVisibility{}
}

// Introduced in DOM Level 2:
public native interface CSSStyleSheet extends /*stylesheets::*/StyleSheet {
//	readonly attribute 
	CSSRule ownerRule{}
//	readonly attribute 
	CSSRuleList cssRules{}
	/*unsigned*/ long insertRule(final String rule, final /*unsigned*/ long index) throws DOMException;
	void deleteRule(final /*unsigned*/ long index) throws DOMException;
}

// Introduced in DOM Level 2:
public native interface ViewCSS extends /*views::*/AbstractView {
	CSSStyleDeclaration getComputedStyle(final Element elt, final String pseudoElt);
}

// Introduced in DOM Level 2:
public native interface DocumentCSS extends /*stylesheets::*/DocumentStyle {
	CSSStyleDeclaration getOverrideStyle(final Element elt, final String pseudoElt);
}

// Introduced in DOM Level 2:
public native interface DOMImplementationCSS extends DOMImplementation {
	CSSStyleSheet createCSSStyleSheet(final String title, final String media) throws DOMException;
}





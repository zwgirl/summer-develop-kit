@Module
package java.lang;  
  
/**  
 * 
 * @author cym
 *
 */
public function void PropertyChange(Object source, PropertyChangeEvent evt); 
 
public interface PropertyChangeListener{ 
	void propertyChange(Object source, PropertyChangeEvent evt);
}

public function boolean Predicate(Object source, String property);
public interface INotifyPropertyChanged { 
	
	public default void notifyChanged(String property){
		PropertyChangeEvent event = new PropertyChangeEvent(property);
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners != null){
			_listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
				h(this, event);
			});
		}
		
		Map<String, PropertyChange[]> _propListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propListeners != null){
			_listeners = _propListeners.get(property);
			if(_listeners != null){
				_listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
					h(this, event);
				});
			}
		}

		Object[][] _pListeners = (Object[][])this["__pListeners"];
		if(_pListeners != null){
			_pListeners.forEach((Object[] pp, int index, Object[][] array)->{
				Predicate pd = (Predicate)pp[0];
				if(pd(this, property)){
					PropertyChange pc = (PropertyChange)pp[1];
					pc(this, event);
				}
			}); 
		}
	}
	
	default void addPropertyChangeListener(PropertyChange handler){
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners == null){
			this["__listeners"] = new Array<PropertyChange>();
		}
		_listeners.push(handler);
	}
	
	default void removePropertyChangeListener(PropertyChange handler){
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners == null){
			return;
		}
		_listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
			if(handler === h){
				_listeners.splice(index, 1);
				return;
			}
		}); 
	}
	
	@SuppressWarnings("unchecked")
	default void addPropertyChangeListener(String propName, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			this["__propListeners"] = new Map<String, PropertyChange[]>();
		}
		PropertyChange[] listeners = _propertyListeners.get(propName);
		if(listeners == null){
			listeners = new Array<PropertyChange>();
			_propertyListeners.set(propName, listeners);
		}
		listeners.push(handler);
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListener(String propName, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			return;
		}
		
		PropertyChange[] listeners = _propertyListeners.get(propName);
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
			if(handler === h){
				listeners.splice(index, 1);
				if(listeners.length == 0){
					_propertyListeners.delete(propName);
				}
				return;
			}
		}); 
	}
	
	default void addPropertyChangeListener(Predicate predicate, PropertyChange handler){
		Array<Array<Object>> _listeners = (Object[][])this["__pListeners"];
		if(_listeners == null){
			this["__pListeners"] = new Array<Array<Object>>();
		}
		_listeners.push(new Object[]{predicate, handler});
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListener(Predicate predicate, PropertyChange handler){
		Object[][] _listeners = (Object[][])this["__pListeners"];
		if(_listeners == null){
			return;
		}
		_listeners.forEach((Object[] pp, int index, Object[][] array)->{
			if(pp[0] === predicate && pp[1] == handler){
				_listeners.splice(index, 1);
				return;
			}
		}); 
	}
}

public interface INotifyCollectionChanged<T> { 
	public void addCollectionChangedListener(CollectionChanged<T> listener);
	public void removeCollectionChangedListener(CollectionChanged<T> listener);
} 

public function void CollectionChanged<T>(Object sender, CollectionChangedEvent<T> event);

public enum CollectionChangedAction{
	Add,
	Move,
	Remove,
	Replace,
	Reset;
}

/// Arguments for the CollectionChanged event.
/// A collection that supports INotifyCollectionChanged This raises this event
/// whenever an item is added or removed, or when the contents of the collection 
/// changes dramatically.
public class CollectionChangedEvent<T> // extends EventArgs
{ 

  private CollectionChangedAction _action; 
  private Array<T> _newItems, _oldItems;
  private int _newStartingIndex = -1;
  private int _oldStartingIndex = -1;
  
  /// Construct a NotifyCollectionChangedEventArgs that describes a reset change.
  /// <param name="action">The action that caused the event (must be Reset).</param>
  @Overload("1")
  public CollectionChangedEvent(CollectionChangedAction action)
  {
      if (action != CollectionChangedAction.Reset) 
          throw new Error(0, "Action must be CollectionChangedAction.Reset");

      initializeAdd(action, null, -1); 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
  /// <param name="action">The action that caused the event; can only be Reset, Add or Remove action.</param> 
  /// <param name="changedItem">The item affected by the change.</param>
  @Overload("2")
  public CollectionChangedEvent(CollectionChangedAction action, T changedItem) 
  { 
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove)
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Reset or CollectionChangedAction.Remove");

      if (action == CollectionChangedAction.Reset)
      { 
          if (changedItem != null)
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          initializeAddOrRemove(action, (java.lang.Array<T>) new Object[]{changedItem}, -1);
      } 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItem">The item affected by the change.</param>
  /// <param name="index">The index where the change occurred.</param>
  @Overload("3")
  public CollectionChangedEvent(CollectionChangedAction action, T changedItem, int index) 
  {
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove) 
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset");

      if (action == CollectionChangedAction.Reset)
      {
          if (changedItem != null)
              throw new Error(0, "ResetAction requires null changedItems"); 
          if (index != -1)
              throw new Error(0, "ResetAction requires index minus 1"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          initializeAddOrRemove(action, (java.lang.Array<T>) new Object[]{changedItem}, index);
      } 
  }

  /// <summary> 
  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item change.
  /// </summary> 
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItems">The items affected by the change.</param>
  @Overload("4")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems)
  { 
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove)
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset"); 

      if (action == CollectionChangedAction.Reset) 
      {
          if (changedItems != null)
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAdd(action, null, -1);
      } 
      else 
      {
          if (changedItems == null) 
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAddOrRemove(action, changedItems, -1);
      } 
  }

  /// <summary> 
  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item change (or a reset).
  /// </summary> 
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItems">The items affected by the change.</param>
  /// <param name="startingIndex">The index where the change occurred.</param>
  @Overload("5")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems, int startingIndex) 
  {
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove) 
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be NotifyCollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset");

      if (action == CollectionChangedAction.Reset)
      {
          if (changedItems != null)
              throw new Error(0, "ResetAction requires null changedItems"); 
          if (startingIndex != -1)
              throw new Error(0, "ResetAction requires index minus 1"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          if (changedItems == null)
              throw new Error(0, "changedItems may not be null!"); 
          if (startingIndex < -1)
              throw new Error(0, "Index cannot be negative"); 

          initializeAddOrRemove(action, changedItems, startingIndex);
      } 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param> 
  /// <param name="newItem">The new item replacing the original item.</param> 
  /// <param name="oldItem">The original item that is replaced.</param>
  @Overload("6")
  public CollectionChangedEvent(CollectionChangedAction action, T newItem, T oldItem) 
  {
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be NotifyCollectionChangedAction.Replace");

      initializeMoveOrReplace(action, (Array<T>)new Object[]{newItem}, (Array<T>)new Object[]{oldItem}, -1, -1);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItem">The new item replacing the original item.</param>
  /// <param name="oldItem">The original item that is replaced.</param> 
  /// <param name="index">The index of the item being replaced.</param>
  @Overload("7")
  public CollectionChangedEvent(CollectionChangedAction action, T newItem, T oldItem, int index) 
  { 
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be CollectionChangedAction.Replace"); 

      initializeMoveOrReplace(action, (Array<T>)new Object[]{newItem}, (Array<T>)new Object[]{oldItem}, index, index);
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItems">The new items replacing the original items.</param> 
  /// <param name="oldItems">The original items that are replaced.</param>
  @Overload("8")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems)
  {
      if (action != CollectionChangedAction.Replace) 
          throw new Error(0, "Action must be CollectionChangedAction.Replace");
      if (newItems == null) 
          throw new Error(0, "changedItems may not be null!"); 
      if (oldItems == null)
          throw new Error(0, "oldItems may not be null!"); 

      initializeMoveOrReplace(action, newItems, oldItems, -1, -1);
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItems">The new items replacing the original items.</param> 
  /// <param name="oldItems">The original items that are replaced.</param>
  /// <param name="startingIndex">The starting index of the items being replaced.</param>
  @Overload("9")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int startingIndex)
  { 
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be CollectionChangedAction.Replace"); 
      if (newItems == null) 
          throw new Error(0, "changedItems may not be null!"); 
      if (oldItems == null) 
          throw new Error(0, "oldItems may not be null!"); 

      initializeMoveOrReplace(action, newItems, oldItems, startingIndex, startingIndex);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Move event. 
  /// <param name="action">Can only be a Move action.</param> 
  /// <param name="changedItem">The item affected by the change.</param>
  /// <param name="index">The new index for the changed item.</param>
  /// <param name="oldIndex">The old index for the changed item.</param>
  @Overload("10")
  public CollectionChangedEvent(CollectionChangedAction action, Object changedItem, int index, int oldIndex) 
  {
      if (action != CollectionChangedAction.Move) 
          throw new Error(0, "Action must be CollectionChangedAction.Move"); 
      if (index < 0)
      	throw new Error(0, "Index cannot be negative"); 

      Array<T> changedItems= new Array<T>(changedItem);
      initializeMoveOrReplace(action, changedItems, changedItems, index, oldIndex);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Move event. 
  /// <param name="action">The action that caused the event.</param> 
  /// <param name="changedItems">The items affected by the change.</param>
  /// <param name="index">The new index for the changed items.</param>
  /// <param name="oldIndex">The old index for the changed items.</param>
  @Overload("11")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems, int index, int oldIndex) 
  {
      if (action != CollectionChangedAction.Move) 
          throw new Error(0, "Action must be CollectionChangedAction.Move"); 
      if (index < 0)
          throw new Error(0, "Index cannot be negative"); 

      initializeMoveOrReplace(action, changedItems, changedItems, index, oldIndex);
  }

  /// Construct a NotifyCollectionChangedEventArgs with given fields (no validation). Used by WinRT marshaling. 
  @Overload("12")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int newIndex, int oldIndex)
  { 
      _action = action;
      _newItems = (newItems == null) ? null : newItems;
      _oldItems = (oldItems == null) ? null : oldItems;
      _newStartingIndex = newIndex; 
      _oldStartingIndex = oldIndex;
  } 

  private void initializeAddOrRemove(CollectionChangedAction action, Array<T> changedItems, int startingIndex)
  { 
      if (action == CollectionChangedAction.Add)
          initializeAdd(action, changedItems, startingIndex);
      else if (action == CollectionChangedAction.Remove)
          initializeRemove(action, changedItems, startingIndex); 
  } 

  private void initializeAdd(CollectionChangedAction action, Array<T> newItems, int newStartingIndex) 
  {
      _action = action;
      _newItems = (newItems == null) ? null : newItems;
      _newStartingIndex = newStartingIndex; 
  }

  private void initializeRemove(CollectionChangedAction action, Array<T> oldItems, int oldStartingIndex) 
  {
      _action = action; 
      _oldItems = (oldItems == null) ? null : oldItems;
      _oldStartingIndex= oldStartingIndex;
  }

  private void initializeMoveOrReplace(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int startingIndex, int oldStartingIndex)
  { 
      initializeAdd(action, newItems, startingIndex); 
      initializeRemove(action, oldItems, oldStartingIndex);
  } 

  /// The action that caused the event. 
  public CollectionChangedAction action
  {
      & { return _action; } 
  }

  /// The items affected by the change.
  public Array<T> newItems
  {
      & { return _newItems; }
  } 

  /// The old items affected by the change (for Replace events). 
  public Array<T> oldItems 
  {
      & { return _oldItems; }
  }

  /// The index where the change occurred. 
  public int newStartingIndex
  { 
      & { return _newStartingIndex; }
  }

  /// The old index where the change occurred (for Move events).
  public int oldStartingIndex 
  {
      & { return _oldStartingIndex; } 
  }

} 

public class PropertyChangeEvent {
    private final String _propertyName;
    
    public PropertyChangeEvent(String propertyName) {
        this._propertyName = propertyName;
    }

    public String propertyName{
    	&{ 
    		return this._propertyName; 
    	}
    }
}


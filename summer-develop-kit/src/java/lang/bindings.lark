@java.lang.Module 
package java.lang;

import java.util.Collection;

import org.w3c.dom.Node;
import org.w3c.event.Event;
import org.w3c.event.EventHandler;
import org.w3c.html.HTMLElement; 

/**
 * 属性变化回调函数类型
 */
public function void PropertyChange(Object source, PropertyChangeEvent evt); 

public interface PropertyChangeListener{ 
	public  PropertyChange propertyChange{
		
	}
}

/**
 * 用于侦听属性变化的条件函数
 */
public function boolean Predicate(Object source, String property);

/**
 * 属性变化通知接口
 */
public interface INotifyPropertyChanged { 
	
	@SuppressWarnings("unchecked")
	public default void notifyChanged(String property){
		PropertyChangeEvent event = new PropertyChangeEvent(property);
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners != null){
			_listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
				h(this, event);
			});
		}
		
		Map<String, PropertyChange[]> _propListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propListeners != null){
			_listeners = _propListeners.get(property);
			if(_listeners != null){
				_listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
					h(this, event);
				});
			}
		}

		Object[][] _pListeners = (Object[][])this["__pListeners"];
		if(_pListeners != null){
			_pListeners.forEach((Object[] pp, int index, Object[][] array)->{
				Predicate pd = (Predicate)pp[0];
				if(pd(this, property)){
					PropertyChange pc = (PropertyChange)pp[1];
					pc(this, event);
				}
			}); 
		}
	}
	
	default void addPropertyChangeListener1(PropertyChange handler){
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners == null){
			this["__listeners"] = _listeners = new Array<PropertyChange>();
		}
		_listeners.push(handler);
	}
	
	default void removePropertyChangeListener1(PropertyChange handler){
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners == null){
			return;
		}
		_listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
			if(handler === h){
				_listeners.splice(index, 1);
				return;
			}
		}); 
	}
	
	@SuppressWarnings("unchecked")
	default void addPropertyChangeListener(String propName, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			this["__propListeners"] = _propertyListeners = new Map<String, PropertyChange[]>();
		}
		PropertyChange[] listeners = _propertyListeners.get(propName);
		if(listeners == null){
			listeners = new Array<PropertyChange>();
			_propertyListeners.set(propName, listeners);
		}
		listeners.push(handler);
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListener(String propName, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			return;
		}
		
		PropertyChange[] listeners = _propertyListeners.get(propName);
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
			if(handler === h){
				listeners.splice(index, 1);
				if(listeners.length == 0){
					_propertyListeners.delete(propName);
				}
				return;
			}
		}); 
	}
	
	default void addPropertyChangeListener3(Predicate predicate, PropertyChange handler){
		Array<Array<Object>> _listeners = (Object[][])this["__pListeners"];
		if(_listeners == null){
			this["__pListeners"] = _listeners = new Array<Array<Object>>();
		}
		_listeners.push(new Object[]{predicate, handler});
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListener3(Predicate predicate, PropertyChange handler){
		Object[][] _listeners = (Object[][])this["__pListeners"];
		if(_listeners == null){
			return;
		}
		_listeners.forEach((Object[] pp, int index, Object[][] array)->{
			if(pp[0] === predicate && pp[1] == handler){
				_listeners.splice(index, 1);
				return;
			}
		}); 
	}
}

@SuppressWarnings("unchecked")
public interface INotifyCollectionChanged<T> {
    default void onCollectionChanged(CollectionChangedEvent<T> e) {
    	CollectionChanged<T>[] listeners = (CollectionChanged<T>[])this["__colListeners"];
		if(listeners == null) return;
		listeners.forEach((CollectionChanged<T> callback, int index, Array<CollectionChanged<T>> array)->{
    		callback(this, e);
    	});
    } 
    
	default void addCollectionChangedListener(CollectionChanged<T> listener) {
		CollectionChanged<T>[] listeners = (CollectionChanged<T>[])this["__colListeners"];
		if(listeners == null){
			this["__colListeners"] = listeners = new Array<CollectionChanged<T>>();
		}
		listeners.push(listener);
	}

	default void removeCollectionChangedListener(CollectionChanged<T> listener) {
		CollectionChanged<T>[] listeners = (CollectionChanged<T>[])this["__colListeners"];
		if(listeners == null) return;
		listeners.forEach((CollectionChanged<T> listener1, int index, Array<CollectionChanged<T>> array)->{
			if(listener1 === listener){
				array.splice(index, 1);
			}
		});
	}
} 

public function void CollectionChanged<T>(Object sender, CollectionChangedEvent<T> event);

public enum CollectionChangedAction{
	Add,
	Move,
	Remove,
	Replace,
	Reset;
}

/// Arguments for the CollectionChanged event.
/// A collection that supports INotifyCollectionChanged This raises this event
/// whenever an item is added or removed, or when the contents of the collection 
/// changes dramatically.
public class CollectionChangedEvent<T> // extends EventArgs
{ 

  private CollectionChangedAction _action; 
  private Array<T> _newItems, _oldItems;
  private int _newStartingIndex = -1;
  private int _oldStartingIndex = -1;
  
  /// Construct a NotifyCollectionChangedEventArgs that describes a reset change.
  /// <param name="action">The action that caused the event (must be Reset).</param>
  @Overload("1")
  public CollectionChangedEvent(CollectionChangedAction action)
  {
      if (action != CollectionChangedAction.Reset) 
          throw new Error(0, "Action must be CollectionChangedAction.Reset");

      initializeAdd(action, null, -1); 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
  /// <param name="action">The action that caused the event; can only be Reset, Add or Remove action.</param> 
  /// <param name="changedItem">The item affected by the change.</param>
  @Overload("2")
  public CollectionChangedEvent(CollectionChangedAction action, T changedItem) 
  { 
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove)
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Reset or CollectionChangedAction.Remove");

      if (action == CollectionChangedAction.Reset)
      { 
          if (changedItem != null)
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          initializeAddOrRemove(action, (java.lang.Array<T>) new Object[]{changedItem}, -1);
      } 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItem">The item affected by the change.</param>
  /// <param name="index">The index where the change occurred.</param>
  @Overload("3")
  public CollectionChangedEvent(CollectionChangedAction action, T changedItem, int index) 
  {
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove) 
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset");

      if (action == CollectionChangedAction.Reset)
      {
          if (changedItem != null)
              throw new Error(0, "ResetAction requires null changedItems"); 
          if (index != -1)
              throw new Error(0, "ResetAction requires index minus 1"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          initializeAddOrRemove(action, (java.lang.Array<T>) new Object[]{changedItem}, index);
      } 
  }

  /// <summary> 
  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item change.
  /// </summary> 
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItems">The items affected by the change.</param>
  @Overload("4")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems)
  { 
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove)
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset"); 

      if (action == CollectionChangedAction.Reset) 
      {
          if (changedItems != null)
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAdd(action, null, -1);
      } 
      else 
      {
          if (changedItems == null) 
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAddOrRemove(action, changedItems, -1);
      } 
  }

  /// <summary> 
  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item change (or a reset).
  /// </summary> 
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItems">The items affected by the change.</param>
  /// <param name="startingIndex">The index where the change occurred.</param>
  @Overload("5")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems, int startingIndex) 
  {
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove) 
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be NotifyCollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset");

      if (action == CollectionChangedAction.Reset)
      {
          if (changedItems != null)
              throw new Error(0, "ResetAction requires null changedItems"); 
          if (startingIndex != -1)
              throw new Error(0, "ResetAction requires index minus 1"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          if (changedItems == null)
              throw new Error(0, "changedItems may not be null!"); 
          if (startingIndex < -1)
              throw new Error(0, "Index cannot be negative"); 

          initializeAddOrRemove(action, changedItems, startingIndex);
      } 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param> 
  /// <param name="newItem">The new item replacing the original item.</param> 
  /// <param name="oldItem">The original item that is replaced.</param>
  @Overload("6")
  public CollectionChangedEvent(CollectionChangedAction action, T newItem, T oldItem) 
  {
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be NotifyCollectionChangedAction.Replace");

      initializeMoveOrReplace(action, (Array<T>)new Object[]{newItem}, (Array<T>)new Object[]{oldItem}, -1, -1);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItem">The new item replacing the original item.</param>
  /// <param name="oldItem">The original item that is replaced.</param>
  /// <param name="index">The index of the item being replaced.</param>
  @Overload("7")
  public CollectionChangedEvent(CollectionChangedAction action, T newItem, T oldItem, int index) 
  { 
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be CollectionChangedAction.Replace"); 

      initializeMoveOrReplace(action, (Array<T>)new Object[]{newItem}, (Array<T>)new Object[]{oldItem}, index, index);
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItems">The new items replacing the original items.</param> 
  /// <param name="oldItems">The original items that are replaced.</param>
  @Overload("8")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems)
  {
      if (action != CollectionChangedAction.Replace) 
          throw new Error(0, "Action must be CollectionChangedAction.Replace");
      if (newItems == null) 
          throw new Error(0, "changedItems may not be null!"); 
      if (oldItems == null)
          throw new Error(0, "oldItems may not be null!"); 

      initializeMoveOrReplace(action, newItems, oldItems, -1, -1);
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItems">The new items replacing the original items.</param> 
  /// <param name="oldItems">The original items that are replaced.</param>
  /// <param name="startingIndex">The starting index of the items being replaced.</param>
  @Overload("9")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int startingIndex)
  { 
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be CollectionChangedAction.Replace"); 
      if (newItems == null) 
          throw new Error(0, "changedItems may not be null!"); 
      if (oldItems == null) 
          throw new Error(0, "oldItems may not be null!"); 

      initializeMoveOrReplace(action, newItems, oldItems, startingIndex, startingIndex);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Move event. 
  /// <param name="action">Can only be a Move action.</param> 
  /// <param name="changedItem">The item affected by the change.</param>
  /// <param name="index">The new index for the changed item.</param>
  /// <param name="oldIndex">The old index for the changed item.</param>
  @Overload("10")
  public CollectionChangedEvent(CollectionChangedAction action, Object changedItem, int index, int oldIndex) 
  {
      if (action != CollectionChangedAction.Move) 
          throw new Error(0, "Action must be CollectionChangedAction.Move"); 
      if (index < 0)
      	throw new Error(0, "Index cannot be negative"); 

      Array<T> changedItems= new Array<T>(changedItem);
      initializeMoveOrReplace(action, changedItems, changedItems, index, oldIndex);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Move event. 
  /// <param name="action">The action that caused the event.</param> 
  /// <param name="changedItems">The items affected by the change.</param>
  /// <param name="index">The new index for the changed items.</param>
  /// <param name="oldIndex">The old index for the changed items.</param>
  @Overload("11")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems, int index, int oldIndex) 
  {
      if (action != CollectionChangedAction.Move) 
          throw new Error(0, "Action must be CollectionChangedAction.Move"); 
      if (index < 0)
          throw new Error(0, "Index cannot be negative"); 

      initializeMoveOrReplace(action, changedItems, changedItems, index, oldIndex);
  }

  /// Construct a NotifyCollectionChangedEventArgs with given fields (no validation). Used by WinRT marshaling. 
  @Overload("12")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int newIndex, int oldIndex)
  { 
      _action = action;
      _newItems = (newItems == null) ? null : newItems;
      _oldItems = (oldItems == null) ? null : oldItems;
      _newStartingIndex = newIndex; 
      _oldStartingIndex = oldIndex;
  } 

  private void initializeAddOrRemove(CollectionChangedAction action, Array<T> changedItems, int startingIndex)
  { 
      if (action == CollectionChangedAction.Add)
          initializeAdd(action, changedItems, startingIndex);
      else if (action == CollectionChangedAction.Remove)
          initializeRemove(action, changedItems, startingIndex); 
  } 

  private void initializeAdd(CollectionChangedAction action, Array<T> newItems, int newStartingIndex) 
  {
      _action = action;
      _newItems = (newItems == null) ? null : newItems;
      _newStartingIndex = newStartingIndex; 
  }

  private void initializeRemove(CollectionChangedAction action, Array<T> oldItems, int oldStartingIndex) 
  {
      _action = action; 
      _oldItems = (oldItems == null) ? null : oldItems;
      _oldStartingIndex= oldStartingIndex;
  }

  private void initializeMoveOrReplace(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int startingIndex, int oldStartingIndex)
  { 
      initializeAdd(action, newItems, startingIndex); 
      initializeRemove(action, oldItems, oldStartingIndex);
  } 

  /// The action that caused the event. 
  public CollectionChangedAction action
  {
      & { return _action; } 
  }

  /// The items affected by the change.
  public Array<T> newItems
  {
      & { return _newItems; }
  } 

  /// The old items affected by the change (for Replace events). 
  public Array<T> oldItems 
  {
      & { return _oldItems; }
  }

  /// The index where the change occurred. 
  public int newStartingIndex
  { 
      & { return _newStartingIndex; }
  }

  /// The old index where the change occurred (for Move events).
  public int oldStartingIndex 
  {
      & { return _oldStartingIndex; } 
  }

} 

public class PropertyChangeEvent {
    private final String _property;
    
    public PropertyChangeEvent(String property) {
        this._property = property;
    }

    public String property{
    	&{ 
    		return this._property; 
    	}
    }
}
  
public interface MarkupExtension {
	public void inject (Object target, String[] properties);
}

public enum UpdateSourceTrigger {
    /**
     * Update whenever the target property changes 
     */
    PropertyChanged,
    /**
     * Update only when target element loses focus, or when Binding deactivates
     */
    LostFocus,
    /**
     * Update only by explicit call to BindingExpression.UpdateSource() 
     */
    Explicit
}  

public enum BindingMode {
    /**
     * Data flows from source to target and vice-versa
     */
    TwoWay, 
    /**
     * Data flows from source to target, source changes cause data flow
     */
    OneWay,
    /**
     * Data flows from source to target once, source changes are ignored 
     */
    OneTime;
} 

public function void UpdateTargetCallback(Object target, String[] property, Object value);
public function void UpdateSourceCallback(Object source, String property, Object value);

public final class Binding implements MarkupExtension, PropertyChangeListener {
	private BindingMode _mode;
	private UpdateSourceTrigger _trigger;
	private String	_property; 
	private Node _target;
	private boolean _trace;
	private String[] _targetProperties;
	private UpdateTargetCallback _updateTargetCallback;
	private UpdateSourceCallback _updateSourceCallback;
	private ConverterFunction _converterTo;
	private ConverterFunction _converterFrom;

	public Binding(Object options) {
		if(options["property"] != undefined){
			this._property = (String) options["property"];
		}
		
		if(options["trace"] != undefined){
			this._trace = (boolean) options["trace"];
		}
		
		if(options["mode"] != undefined){
			this._mode = (BindingMode) options["mode"];
		} else {
			this._mode = BindingMode.OneTime;
		}
		
		if(options["trigger"] != undefined){
			this._trigger = (UpdateSourceTrigger) options["trigger"];
		} else {
			this._trigger = UpdateSourceTrigger.LostFocus;
		}
		
		if(options["updateTargetCallback"] != undefined){
			this._updateTargetCallback = (UpdateTargetCallback) options["updateTargetCallback"];
		}
		
		if(options["updateSourceCallback"] != undefined){
			this._updateSourceCallback = (UpdateSourceCallback) options["updateSourceCallback"];
		}
		
		if(options["converterTo"] != undefined){
			this._converterTo = ((ConverterFunction) options["converterTo"]);
		}
		
		if(options["converterFrom"] != undefined){
			this._converterFrom = ((ConverterFunction) options["converterFrom"]);
		}
	} 

	public String property {
		& { 
			return _property; 
		} 
		+ {
			_property = value;
		} 
	} 
	 
	public boolean trace {
		& {
			return _trace; 
		} 
		+ { 
			this._trace = value; 
		}
	} 

	public BindingMode mode {
		& {
			return _mode; 
		} 
		+ { 
			this._mode = value; 
		}
	} 

	public UpdateSourceTrigger trigger {
		& { 
			return _trigger; 
		}
		+ {
			this._trigger = value;
		} 
	}
	
	public UpdateTargetCallback updateTargetCallback{
		&{
			return this._updateTargetCallback;
		}
		+{
			this._updateTargetCallback = value;
		}
	}
	public UpdateSourceCallback updateSourceCallback{
		&{
			return this._updateSourceCallback;
		}
		+{
			this._updateSourceCallback = value;
		}
	}
	
	public ConverterFunction converterTo{
		&{
			return this._converterTo;
		}
		+{
			this._converterTo = value;
		}
	}
	
	public ConverterFunction converterFrom{
		&{
			return this._converterFrom;
		}
		+{
			this._converterFrom = value;
		}
	}
	
	public void inject(Object target, String[] targetProperties){
		this._target = (Node)target;
		this._targetProperties = targetProperties;
		
  		switch(this._mode){
  		case TwoWay:
  			if(target instanceof HTMLElement){
	  			attachTarget((HTMLElement)_target);
  			}
  		case OneWay:
  			_target.dataContext.addBinding(this);
  		case OneTime:
  			updateTarget(_target, targetProperties, _target.dataContext.dataItem);
		}
	}
	
	public void unInject(){
  		switch(this._mode){
  		case TwoWay:
  			if(_target instanceof HTMLElement){
  				detachTarget((HTMLElement)_target);
  			}
  		case OneWay:
  			_target.dataContext.removeBinding(this);
  		case OneTime:
//  			updateTarget(_target, _targetProperties, _target.dataContext.dataItem);
		}
	}
	
	protected void updateTarget(Node target, String[] properties, Object data){
		if(!String.isNullOrEmpty(this.property)){
			data = data == null ? null : data[this.property];
		}
		setTargetProperty(_targetProperties, data);
	}

	private PropertyChange _propertyChange = (Object source, PropertyChangeEvent evt)-> {
		Object data = source;
		if(!String.isNullOrEmpty(this._property)){
			data = source[evt.property];
		}
		setTargetProperty(_targetProperties, data);
	};
	
	public PropertyChange propertyChange{
		&{
			return this._propertyChange;
		}
	}
	
	protected void setTargetProperty(String[] properties, Object data){
		Object tag = this._target;
		int length = properties.length; 
		for(int i = 0 ; i < length - 1; i++){
			if(tag == null) return;
			tag = tag[properties[i]];
		}
		
		if(this._converterTo != null){
			data = this._converterTo(data);
		}
		
		Object oldValue = tag[properties[length-1]];
		if(data == oldValue){
			return;
		}
		
		if(this._updateTargetCallback != null){
			this._updateTargetCallback(this._target, properties, data);
		} else {
			tag[properties[length-1]] = data;
		}
	}
	
	protected Object getProperty(Node target, String[] properties){
		Object result = target;
		int length = properties.length;
		for(int index = 0 ; index < length - 1; index++){
			if(result == null) return null;
			result = result[properties[index]];
		}
		return result[properties[length-1]];
	}

	protected void attachTarget(HTMLElement target){
		// listen for lost focus and input 
		switch(this._trigger) { 
			case LostFocus:
				target.addEventListener("blur", this.updateSource, false);
				break; 
			case PropertyChanged: 
				target.addEventListener("input", this.updateSource, false);
				target.addEventListener("change", this.updateSource, false);
				break;
			default:
		}  
	}
	
	protected void detachTarget(HTMLElement target){
		// listen for lost focus and input 
		switch(this._trigger) { 
			case LostFocus:
				target.removeEventListener("blur", this.updateSource, false);
				break; 
			case PropertyChanged: 
				target.removeEventListener("input", this.updateSource, false);
				target.removeEventListener("change", this.updateSource, false);
				break;
			default:
		}  
	} 
	
	protected EventHandler updateSource = (Event event) ->{
		Object value = getProperty((Node)event.target, this._targetProperties);
		if(this._converterFrom != null){
			value = this._converterFrom(value);
		}
		return this._target.dataContext.updateSource(this._property, value, this._updateSourceCallback);
	};
}
public function Object ConverterFunction(Object data);

public enum DataContextMode {
	Root,
	Template,
	Standalone,
	Ancestor;
}

public final class DataContext implements PropertyChangeListener, INotifyPropertyChanged{  
	private DataContextMode _mode;
	private String _property;
	private Binding[] _bindings = {};
	private DataContext[] _dependents = {};
	private BaseTemplateSetting[] _templates = {};
	private Object _dataItem;
//	private Node _currentNode;
	
	/**
	 * only for dataContext of document 
	 */
	@Overload("0")
	public native DataContext() /*-{
		this._mode = __lc("java.lang.DataContextMode").Root;
		this._dataItem = __this; 
		this._bindings = [];
		this._dependents = [];
		this._templates = [];
	}-*/;
	
	/**
	 * for ancestor mode
	 */
	@Overload("1")
	public DataContext(String property) {
		this._mode = DataContextMode.Ancestor;
		this._property = property;
	};
	
	/**
	 * for dataContext of Standalone  mode, Template mode and Root mode
	 */
	@Overload("2")
	public DataContext(String property, Object dataItem, DataContextMode mode) {
		this._mode = mode; //DataContextMode.Standalone;
		this._property = property;
		this._dataItem = dataItem; 
	};
	
	public String property{
		&{
			return this._property; 
		}
		+{
			this._property = value;
		}
	}
	
	public Object dataItem{
		&{
			return this._dataItem;
		}
		+{
			if(value === this._dataItem)
				return;

			replaceDataItem(value); 
			this._dataItem = value;
			dirty(value);
		}
	}

	public DataContextMode mode{
		&{
			return this._mode;
		}
		+{
			if(value === this._mode)
				return;

			this._mode = value;
		}
	}
	
	public void inject(Node target, String targetProperty, String targetProperty1){
		target.dataContext = this;
	}
	
	public void addBinding(Binding binding){
		_bindings.push(binding);
		if(String.isNullOrEmpty(binding.property)){
			this.addPropertyChangeListener("dataItem", binding.propertyChange);
			if(binding.trace){
				if(this._dataItem instanceof INotifyPropertyChanged){
					((INotifyPropertyChanged) this._dataItem).addPropertyChangeListener1(binding.propertyChange);
				}
			}
		} else {
			if(this._dataItem instanceof INotifyPropertyChanged){
				((INotifyPropertyChanged) this._dataItem).addPropertyChangeListener(binding.property, binding.propertyChange);
			}
		}
	}
	
	public void removeBinding(Binding binding){
		_bindings.forEach((Binding be, int index, Array<Binding> array)->{
			if(be == binding){
				_bindings.splice(index, 1);
				return;
			}
		});
		
		if(String.isNullOrEmpty(binding.property)){
			this.removePropertyChangeListener("dataItem", binding.propertyChange);
			if(binding.trace){
				this.removePropertyChangeListener1(binding.propertyChange);
			}
		} else {
			if(this._dataItem instanceof INotifyPropertyChanged){
				((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(binding.property, binding.propertyChange);
			}
		}
	}
	
	public void addTemplateSetting(BaseTemplateSetting ts){ 
		_templates.push(ts);
		if(String.isNullOrEmpty(ts.property)){
			this.addPropertyChangeListener("dataItem", ts.propertyChange);
			ts.dataItem = this._dataItem;
		} else {
			if(this._dataItem instanceof INotifyPropertyChanged){
				((INotifyPropertyChanged) this._dataItem).addPropertyChangeListener(ts.property, ts.propertyChange);
			}
			ts.dataItem = this._dataItem != null ? this._dataItem[ts.property] : null;
		}
	}
	
	public void removeTemplateSetting(TemplateSetting ts){
		_templates.forEach((BaseTemplateSetting ts1, int index, Array<BaseTemplateSetting> array)->{
			if(ts == ts1){
				_templates.splice(index, 1);
				return;
			}
		});
		
		if(String.isNullOrEmpty(ts.property)){
			this.removePropertyChangeListener("dataItem", ts.propertyChange);
		} else {
			if(this._dataItem instanceof INotifyPropertyChanged){
				((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(ts.property, ts.propertyChange);
			}
		}
	}
	
	public void addDependent(DataContext dependent){ 
		_dependents.push(dependent);
		
		if(this._dataItem != null){
			dependent.dataItem = this.dataItem[dependent.property];
		} else {
			dependent.dataItem = null;
		}
	}
	
	public void removeDependent(DataContext dependent){
		_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
			if(dc === dependent){
				_dependents.splice(index, 1); 
				return;
			}
		});
	}
	
	protected void dirty(Object data){
		_bindings.forEach((Binding binding, int index, Array<Binding> array)->{
			binding.propertyChange(this.dataItem, new PropertyChangeEvent(binding.property));
		});
		
		_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
			dc.propertyChange(this.dataItem, new PropertyChangeEvent(dc.property));
		});
		
		_templates.forEach((BaseTemplateSetting ts, int index, Array<BaseTemplateSetting> array)->{
			ts.propertyChange(this.dataItem, new PropertyChangeEvent(ts.property));
		});
	}
	 
	protected void replaceDataItem(Object newDataItem){
		if(this._dataItem != null && this._dataItem instanceof INotifyPropertyChanged){  
			INotifyPropertyChanged oldPc = (INotifyPropertyChanged) this._dataItem;
			for(int i=0, length = _dependents.length; i<length; i++){
				oldPc.removePropertyChangeListener(_dependents[i].property, _dependents[i].propertyChange);
			}
			
			for(int i=0, length = _bindings.length; i<length; i++){
				oldPc.removePropertyChangeListener(_bindings[i].property, _bindings[i].propertyChange);
			}
			
			for(int i=0, length = _templates.length; i<length; i++){
				oldPc.removePropertyChangeListener(_templates[i].property, _templates[i].propertyChange);
			}
		}
		
		if(newDataItem != null && newDataItem instanceof INotifyPropertyChanged){
			INotifyPropertyChanged newPc = (INotifyPropertyChanged) newDataItem;
			for(int i=0, length = _dependents.length; i<length; i++){
				newPc.addPropertyChangeListener(_dependents[i].property, _dependents[i].propertyChange);
			}
			
			for(int i=0, length = _bindings.length; i<length; i++){
				newPc.addPropertyChangeListener(_bindings[i].property, _bindings[i].propertyChange);
			}
			
			for(int i=0, length = _templates.length; i<length; i++){
				newPc.addPropertyChangeListener(_templates[i].property, _templates[i].propertyChange);
			}
		}
	}

	private PropertyChange _propertyChange = (Object source, PropertyChangeEvent e) -> {
		Object superior = source[e.property];
		if(superior == null){
			this.dataItem = null;
		} else {
			this.dataItem = superior[this.property];
		}
	};
	
	public PropertyChange propertyChange{
		&{
			return this._propertyChange;
		}
	}
	
	protected boolean updateSource(String property, Object data, UpdateSourceCallback callback){
		if(this.dataItem === data){
			return true;
		}
		
		if(callback != null){
			callback(this._dataItem, property, data);
		} else {
			if(this._dataItem == null){
				return true;
			}
			
			this._dataItem[property] = data;
		}
		
		return true;
	}

	public void reset() {
		_templates.forEach((BaseTemplateSetting ts, int index, Array<BaseTemplateSetting> array)->{
			if(String.isNullOrEmpty(ts.property)){
				this.removePropertyChangeListener("dataItem", ts.propertyChange);
			} else {
				if(this._dataItem instanceof INotifyPropertyChanged){
					((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(ts.property, ts.propertyChange);
				}
			}
		});
		_templates.length = 0;
		
		_bindings.forEach((Binding binding, int index, Array<Binding> array)->{
			if(String.isNullOrEmpty(binding.property)){
				this.removePropertyChangeListener("dataItem", binding.propertyChange);
			} else {
				if(this._dataItem instanceof INotifyPropertyChanged){
					((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(binding.property, binding.propertyChange);
				}
			}
		});
		_bindings.length = 0;
		
		_dependents.forEach((DataContext dataContext, int index, Array<DataContext> array)->{
			if(String.isNullOrEmpty(dataContext.property)){
				this.removePropertyChangeListener("dataItem", dataContext.propertyChange);
			} else {
				if(this._dataItem instanceof INotifyPropertyChanged){
					((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(dataContext.property, dataContext.propertyChange);
				}
			}
		});
		_dependents.length = 0;
	}
}

/**
 * 
 * @author cym
 * 
 */
public function boolean BeforeCallback(Object data, int index);
public function void AfterCallback(Node node, int index);
public abstract class Template {
	protected Node[] _rootNodes = {};
	protected Object _data;
	protected DataContextCallback _dataContextCallback;
	
	public DataContextCallback dataContextCallback{
		&{
			return this._dataContextCallback;
		}
		+{
			this._dataContextCallback = value;
		}
	};

	public Node[] rootNodes{
		&{
			return this._rootNodes;
		}
	}
	
	protected Object data{
		&{
			return this._data;
		}
		+{
			this._data = value;
		}
	}
	
	public final void applyTemplate(Node parent, Object data, int index){
		doApplyTemplate(parent, data, index);
	}
	
	protected void doApplyTemplate(Node parent, Object data, int index){
		throw new Error(0, "illegal call!");
	}

	public void undoTemplate(Node parent) {
		_rootNodes.forEach((Node node, int index, Array<Node> array)->{
			parent.removeChild(node);
		});
	}
	
	protected Node setupDataContext(Node node, Object data, int index){
		if(this._dataContextCallback != null){
			return this._dataContextCallback(node, data, index);
		}
		return node;
	}
	
	protected void before(Object data, int index){
		
	}
	
	protected Node after(Node node, Object data, int index){
		return node;
	}
}

public abstract class TemplateSelector{
	public Template select(Object data){
		return doSelect(data);
	}
	
	protected abstract Template doSelect(Object data);
}

public function void ApplyTemplateCallback();
public function Node DataContextCallback(Node node, Object data, int index);

public abstract class BaseTemplateSetting implements MarkupExtension, PropertyChangeListener{
	private Class<Template> _template;
	protected Class<TemplateSelector> _selector;
	protected TemplateSelector _selectorInstance;
	protected String _property;  
	protected Node _container;
	protected boolean _invariant;
	protected Object _dataItem;
	protected DataContextCallback _dataContextCalback;
	
	@SuppressWarnings("unchecked")
	public BaseTemplateSetting(Object option){
		if(option["template"] != null){
			this._template = (Class<Template>) option["template"];
		}
		if(option["selector"] != null){
			this.selector = (Class<TemplateSelector>) option["selector"];
			this._selectorInstance = (TemplateSelector) _selector.newInstance();
		} 
		if(option["property"] != null){
			this._property = (String) option["property"];
		} 
		if(option["invariant"] != null){
			this._invariant = (boolean) option["invariant"];
		}
		if(option["property"] != null){
			this._property = (String) option["property"];
		}
		
		if(option["dataContextCalback"] != null){
			this._dataContextCalback = (DataContextCallback) option["dataContextCalback"];
		} 
	} 
	
	public Class<Template> template{
		&{
			return this._template;
		}
		+{
			this._template = value;
		}
	}
	
	public Class<TemplateSelector> selector{
		&{
			return this._selector;
		}
		+{
			this._selector = value;
		}
	}
	
	public String property{
		&{
			return this._property;
		}
		+{
			this._property = value;
		}
	}
	
	public boolean invariant{
		&{
			return this._invariant;
		}
		+{
			this._invariant = value;
		}
	}
	
	public Node container{
		&{
			return this._container;
		}
	}
	
	public Object dataItem{
		&{
			return this._dataItem;
		}
		+{
			if(this._dataItem === value){
				return;
			}
			this._dataItem = value;
			dirty();
		}
	}
	
	protected abstract void dirty();
	
	public DataContextCallback dataContextCalback{
		&{
			return this._dataContextCalback;
		}
		+{
			this._dataContextCalback = value;
		}
	}
	
	public void applyTemplate(){
		internalApplyTemplate(this._dataItem, -1);
	}
	
	protected Node setupDataContext(Node current, Object data, int index){return current;}
	
	protected abstract void internalApplyTemplate(Object data, int index);
	
	/**
	 * 撤销模板展开的节点
	 */
	public abstract void undoTemplate();
	
	/**
	 * source是上级dataContext，event的property是dataItem；
	 * 
	 */
	private PropertyChange _propertyChange = (Object source, PropertyChangeEvent event)-> {
		Object data = source[event.property];
		if(data != null){
			if(String.isNullOrEmpty(this.property)){
				this._dataItem = data;
			} else {
				this.dataItem = data[this.property];  
			}
		} else {
			this._dataItem = null;
		}
	};
	
	public PropertyChange propertyChange{
		&{
			return this._propertyChange;
		}
	}

	@Override
	public void inject(Object node, String[] properties) {
		this._container = (Node) node;
		node[properties[0]] = this;   //node.template = this
	}
	
	public void unInject(){
		
	}
}

public class TemplateSetting extends BaseTemplateSetting implements MarkupExtension, PropertyChangeListener{
	private Template _templateInstance;
	
	public TemplateSetting(Object option){
		super(option);
		if(this._dataContextCalback == null){
			this._dataContextCalback = this._setupDataContext;
		}
	} 
	
	public void applyTemplate(){
		internalApplyTemplate(this._dataItem, -1);
	}
	
	protected void internalApplyTemplate(Object data, int index){
		if(this._templateInstance == null){
			this._templateInstance = createTemplate(data);
		} else {
			if(this._selectorInstance != null){
				Template newTemp = createTemplate(data);
				if(newTemp.getClass().id == this._templateInstance.getClass().id){
					return;
				}
				undoTemplate();
				this._templateInstance = newTemp;
			} else {
				return;
			}
		}
		if(this._templateInstance != null) this._templateInstance.applyTemplate(container, data, index);
	}
	
	/**
	 * 撤销模板展开的节点
	 */
	public void undoTemplate(){
		if(this._templateInstance != null) this._templateInstance.undoTemplate(this.container);
	}
	
	private Template createTemplate(Object data){
		Template result = null;
		if(this._selectorInstance != null){
			result = this._selectorInstance.select(data);
		} else {
			result =  (Template) this.template.newInstance();
		}
		
		if(result != null){
			result._dataContextCallback = _setupDataContext;
		}
		
		return result;
	}
	
	private DataContextCallback _setupDataContext = (Node node, Object data, int index) ->{
		if(String.isNullOrEmpty(this._property)){
			node.dataContext = new DataContext(this._property, data, DataContextMode.Ancestor);
		}
		return node;
	};

	@Override
	protected void dirty() {
		
		
	}
}

public class CollectionTemplateSetting extends TemplateSetting implements MarkupExtension, PropertyChangeListener{
	private ApplyTemplateCallback _applyTemplateCallback;
	protected Map<Object, Template> itemsMap = new Map<Object, Template>();
	
	public CollectionTemplateSetting(Object option){
		super(option); 
		
		if(this._dataContextCalback == null){
			this._dataContextCalback = this._setupDataContext;
		}
		
		if(option["applyTemplateCallback"] != null){
			this._applyTemplateCallback = (ApplyTemplateCallback) option["applyTemplateCallback"];
		} 
	} 
	
	public ApplyTemplateCallback applyTemplateCallback{
		&{
			return this._applyTemplateCallback;
		}
		+{
			this._applyTemplateCallback = value;
		}
	}
	
	protected void dirty(){
		undoTemplate();
		
		if(this._dataItem != null){
			if(this._dataItem instanceof INotifyCollectionChanged){
				((INotifyCollectionChanged<Object>)this._dataItem).removeCollectionChangedListener(this.onCollectionChanged);
			}
		}

		if(this._dataItem  != null){
			if(this._dataItem instanceof INotifyCollectionChanged){
				((INotifyCollectionChanged<Object>)this._dataItem).addCollectionChangedListener(this.onCollectionChanged);
			}
			
			applyTemplate();
		}
	}
	public void applyTemplate(){
		if(this._applyTemplateCallback != null){
			this._applyTemplateCallback(this._dataItem);
		} else {
			if(this._dataItem instanceof Collection){
				int index = 0;
				for(Object item : (Collection<?>)this._dataItem){
					internalApplyTemplate(item, index++);
				}
			}
		}
	}
	
	protected void internalApplyTemplate(Object data, int index){
		Template template = createTemplate(data);
		if(template == null){
			return;
		}
		template.applyTemplate(container, data, index);
		itemsMap.set(data, template);
	}
	
	/**
	 * 撤销模板展开的节点
	 */
	public void undoTemplate(){
		this.itemsMap.forEach((Template temp, Object data, Map<Object, Template> map)->{
			temp.undoTemplate(this.container);
		});
		itemsMap.clear();
	}
	
	protected CollectionChanged<Object> onCollectionChanged = (Object sender, CollectionChangedEvent<Object> event) ->{
		switch(event.action){
		case Add:
			Array<?> items = event.newItems;
			if(items == null || items.length <= 0){
				break;
			}
			int start = event.newStartingIndex;
			for(Object item : items){
				Template template = createTemplate(item);
				template.applyTemplate(this._container, item, start++);
				itemsMap.set(item, template);
			} 
			break;
		case Reset:
			undoTemplate();
			break;
		case Remove:
			Template[] toBeRemoved = {};
			for(Object item : event.oldItems){
				Template temp = itemsMap.get(item);
				temp.undoTemplate(this._container);
				itemsMap.delete(item);
			}
			break;
		case Replace:
			Object newItem = event.newItems[0], old = event.oldItems[0];
			Template oldTemp = itemsMap.get(old);
			Template newTemp = createTemplate(newItem);
			if(newTemp ==null || newTemp.getClass().id != oldTemp.getClass().id){
				oldTemp.undoTemplate(this._container);
				newTemp.applyTemplate(this._container, newItem,  event.newStartingIndex);
			}
		case Move:
			
		}
	};
	
	protected Template createTemplate(Object data){
		Template result = null;
		if(this._selectorInstance != null){
			result = this._selectorInstance.select(data);
		} else {
			if(this.template != null) result = (Template) this.template.newInstance();
		}
		
		if(result != null){
			result._dataContextCallback = _setupDataContext;
		}
		
		return result;
	}
	
	private  DataContextCallback _setupDataContext = (Node n, Object d, int index) ->{
		n.dataContext = new DataContext(null, d, DataContextMode.Standalone);
		return n;
	};
}

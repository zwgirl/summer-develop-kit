@java.lang.Module 
package java.lang;

import java.lang.Iterator.Item;
import java.util.Collection;
import java.util.ObservableCollection;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.event.Event;
import org.w3c.event.EventHandler;
import org.w3c.html.HTMLAnchorElement;

public interface Bindable{
	public Binding getBinding(String[] properties);
	public void setBinding(String[] properties, Binding binding);
	public boolean removeBinding(String[] properties);
	public void attach(Binding binding);
	public void detach(Binding binding);
	public void update(Binding binding);
	public DataContext getDataContext(String name);
	public void addDataContext(DataContext context);
	public void removeDataContext(String name);
	public Bindable parentNode{+;&;}
	public Bindable logicParent{
		&;+;
	}
   
	public Bindable appendChild(Bindable child);
	public void setAttribute(final String name, final Object value);
	public void setAttributeNS(final String namespaceURI, final String qualifiedName, final Object value);
   
	public void reset();
}

public function void BodyHandler();
public interface Tag {
	public void body();
	
	public BodyHandler bodyHandler{
		&;
		+;
	}
}
public abstract class AbstractBindable implements Bindable, Tag{
	protected Bindable[] _childs;
	protected Bindable _parent;
	
	protected AbstractBindable(Bindable parent){
		this._parent = parent;
	}
	
	@Override
	public Bindable appendChild(Bindable child) {
		processChild(child);
		return this.parentNode.appendChild(child);
	}
	
	public Bindable processChild(Bindable child) {
		if(this._childs == null){
			this._childs = new Bindable[]{};
		}
		this._childs.push(child);
		child["_logicParent"] = this;
		return child;
	}
	
	public Binding getBinding(String[] properties){ 
		Map<String, Binding> bindings = (Map<String, Binding>) this["__bindings"];
    	if(bindings == null){
    		return null;
    	}
    	return bindings.get(properties.join("."));
    }
    
    public void setBinding(String[] properties, Binding binding){
    	Map<String, Binding> bindings = (Map<String, Binding>) this["__bindings"];
    	if(bindings == null){
    		this["__bindings"] = bindings = new Map<String, Binding>();
    	}
    	Binding old = bindings.get(properties.join("."));
    	if(old === binding){
    		return;
    	}
    	
    	if(old != null){
        	old.unInject(this);
    	}
    	
    	bindings.set(properties.join("."), binding);
    	binding.inject(this, properties);
    }
    
    public boolean removeBinding(String[] properties){
    	Map<String, Binding> bindings = (Map<String, Binding>) this["__bindings"];
    	if(bindings == null){
    		return false;
    	}
    	
    	Binding old = bindings.get(properties.join("."));
    	if(old == null){
    		return false;
    	}
    	
    	if(old != null){
        	old.unInject(this);
    	}
    	
    	bindings.delete(properties.join("."));
    	return true;
    }
    
	public void attach(Binding binding){}
	public void detach(Binding binding){}
	
	public void update(Binding binding){
		Object data = this.getDataContext(binding.context).dataItem;
		if(!String.isNullOrEmpty(binding.property)){
			
			data = data == null ? null : data[binding.property];
		}

		Object tag = this;
		String[] properties = binding.targetProperties;
		int length = properties.length; 
		for(int i = 0 ; i < length - 1; i++){
			if(tag == null) return;
			tag = tag[properties[i]];
		}
		
		if(binding.converteTo != null){
			data = binding.converteTo(data);
		}
		
		Object oldValue = tag[properties[length-1]];
		if(data === oldValue){
			return;
		}
		
		if(binding.updateTargetCallback != null){
			binding.updateTargetCallback(this, properties, data);
		} else {
			tag[properties[length-1]] = data;
		}
	}
    
    public DataContext getDataContext(String name){
    	if(String.isNullOrEmpty(name)){
    		return null;
    	}
    	Map<String, DataContext> contexts = (Map<String, DataContext>) this["__contexts"];
    	if(contexts != null){
    		DataContext result = contexts.get(name);
    		if(result != null){
    			return result;
    		}
    	}
    	
    	if(this.logicParent != null){
        	return this.logicParent.getDataContext(name);
      	} else if(parentNode != null){
    		return this.parentNode.getDataContext(name);
    	}
    	
    	return null;
    }
    
    public void addDataContext(DataContext context){
    	Map<String, DataContext> contexts = (Map<String, DataContext>) this["__contexts"];
    	if(contexts == null){
    		this["__contexts"] = contexts = new Map<String, DataContext>();
    	}
    	
    	DataContext old = contexts.get(name);
    	if(old != null){
    		old.moveDependentTo(context);
    	}
    	
    	contexts.set(context.name, context);
   	
    	if(context.name == "ROOT" || context.name == "TEMPLATE"){
    		return;
    	}
    	
    	if(this.logicParent != null){
        	DataContext parent = this.logicParent.getDataContext(context.ancestor);
        	if(parent != null){
        		parent.addDependent(context);
        	} else {
        		console.log("ancestor of DataContext[" + context.ancestor + "] does not exists!");
        	}
    	} else if(this.parentNode != null){
        	DataContext parent = this.parentNode.getDataContext(context.ancestor);
        	if(parent != null){
        		parent.addDependent(context);
        	} else {
        		console.log("ancestor of DataContext[" + context.ancestor + "] does not exists!");
        	}
    	}
    }
    
    public void removeDataContext(String name){
    	if(String.isNullOrEmpty(name)){
    		return;
    	}
    	
       	Map<String, DataContext> contexts = (Map<String, DataContext>) this["__contexts"];
    	if(contexts == null){
    		return;
    	}
    	DataContext context = contexts.get(name);
    	if(context != null){
    		context.clearDependents();
    		
    		if(logicParent != null){
    			DataContext parent = this.logicParent.getDataContext(context.ancestor);
            	if(parent != null){
            		parent.addDependent(context);
            	} else {
            		console.log("ancestor of DataContext[" + context.ancestor + "] does not exists!");
            	}
    		} else if(this.parentNode != null){
            	DataContext parent = this.parentNode.getDataContext(context.ancestor);
            	if(parent != null){
            		parent.addDependent(context);
            	} else {
            		console.log("ancestor of DataContext[" + context.ancestor + "] does not exists!");
            	}
        	}
        	contexts.delete(name);
    	}
    }
    
    public Bindable parentNode{
	    &{
			return (Bindable)this._parent;
		}
		+{
			this._parent = value;
		}
    }
    
    public Bindable logicParent{
	   	&{
	   		return (Bindable)this["_logicParent"];
	   	}
	   	+{
	   		this["_logicParent"] = value;
	   	}
    }
    
    public void reset(){
    	if(this._childs != null){
    		this._childs.forEach((Bindable child, int index, Array<Bindable> array)->{
    			child.reset();
    		});
    	}
    	
    	Map<String, Binding> bindings = (Map<String, Binding>) this["__bindings"];
		if(bindings != null){
			bindings.forEach((Binding binding, String key, Map<String, Binding> map)->{
				binding.reset();
			});
		}
		
		Map<String, DataContext> contexts = (Map<String, DataContext>) this["__contexts"];
		contexts.forEach((DataContext context, String key, Map<String, DataContext> mapObj)->{
			context.reset(this);
		});
	}
    
    @Override
    public void body(){
    	doBody();
    }
    
    protected void doBody(){
    	this.bodyHandler();
    }
    
	public BodyHandler bodyHandler{
		&{
			return (BodyHandler)this["_bodyHandler"];
		}
		+{
			this["_bodyHandler"]= value;
		}
	}
	
	public void setAttribute(final String name, final Object value){
		this[name] = value;
	}
	public void setAttributeNS(final String namespaceURI, final String qualifiedName, final Object value){
		this[name] = value;
	}
}
/**
 */
public function void PropertyChange(Object source, PropertyChangeEvent evt); 

public interface PropertyChangeListener{ 
	public  PropertyChange propertyChange{
		
	}
}

/**
 */
public function boolean Predicate(Object source, String property);

/**
 */
public interface INotifyPropertyChanged { 
	
	@SuppressWarnings("unchecked")
	public default void notifyChanged(String property){
		PropertyChangeEvent event = new PropertyChangeEvent(property);
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners != null){
			_listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
				h(this, event);
			});
		}
		
		Map<String, PropertyChange[]> _propListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propListeners != null){
			_listeners = _propListeners.get(property);
			if(_listeners != null){
				_listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
					h(this, event);
				});
			}
		}

		Object[][] _pListeners = (Object[][])this["__pListeners"];
		if(_pListeners != null){
			_pListeners.forEach((Object[] pp, int index, Object[][] array)->{
				Predicate pd = (Predicate)pp[0];
				if(pd(this, property)){
					PropertyChange pc = (PropertyChange)pp[1];
					pc(this, event);
				}
			}); 
		}
	}
	
	default void addAllPropertyChangeListener(PropertyChange handler){
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners == null){
			this["__listeners"] = _listeners = new Array<PropertyChange>();
		}
		_listeners.push(handler);
	}
	
	default void removeAllPropertyChangeListener(PropertyChange handler){
		PropertyChange[] _listeners = (PropertyChange[])this["__listeners"];
		if(_listeners == null){
			return;
		}
		_listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
			if(handler === h){
				_listeners.splice(index, 1);
				return;
			}
		}); 
	}
	
	@SuppressWarnings("unchecked")
	default void addPropertyChangeListener(String propName, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			this["__propListeners"] = _propertyListeners = new Map<String, PropertyChange[]>();
		}
		PropertyChange[] listeners = _propertyListeners.get(propName);
		if(listeners == null){
			listeners = new Array<PropertyChange>();
			_propertyListeners.set(propName, listeners);
		}
		listeners.push(handler);
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListener(String propName, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			return;
		}
		
		PropertyChange[] listeners = _propertyListeners.get(propName);
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
			if(handler === h){
				listeners.splice(index, 1);
				if(listeners.length == 0){
					_propertyListeners.delete(propName);
				}
				return;
			}
		}); 
	}
	
	@SuppressWarnings("unchecked")
	default void addPropertyChangeListeners(String[] propNames, PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			this["__propListeners"] = _propertyListeners = new Map<String, PropertyChange[]>();
		}
		
		for(String propName : propNames){
			PropertyChange[] listeners = _propertyListeners.get(propName);
			if(listeners == null){
				listeners = new Array<PropertyChange>();
				_propertyListeners.set(propName, listeners);
			}
			listeners.push(handler);
		}
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListeners(PropertyChange handler){
		Map<String, PropertyChange[]> _propertyListeners = (Map<String, PropertyChange[]>)this["__propListeners"];
		if(_propertyListeners == null){
			return;
		}
		
		_propertyListeners.forEach((Array<PropertyChange> listeners, String key, Map<String, PropertyChange[]> context)->{
			listeners.forEach((PropertyChange h, int index, PropertyChange[] array)->{
				if(handler === h){
					listeners.splice(index, 1);
					if(listeners.length == 0){
						_propertyListeners.delete(key);
					}
					return;
				}
			}); 
		});
	}
	
	default void addPropertyChangeListener3(Predicate predicate, PropertyChange handler){
		Array<Array<Object>> _listeners = (Object[][])this["__pListeners"];
		if(_listeners == null){
			this["__pListeners"] = _listeners = new Array<Array<Object>>();
		}
		_listeners.push(new Object[]{predicate, handler});
	}
	
	@SuppressWarnings("unchecked")
	default void removePropertyChangeListener3(Predicate predicate, PropertyChange handler){
		Object[][] _listeners = (Object[][])this["__pListeners"];
		if(_listeners == null){
			return;
		}
		_listeners.forEach((Object[] pp, int index, Object[][] array)->{
			if(pp[0] === predicate && pp[1] == handler){
				_listeners.splice(index, 1);
				return;
			}
		}); 
	}
}

@SuppressWarnings("unchecked")
public interface INotifyCollectionChanged<T> {
    default void onCollectionChanged(CollectionChangedEvent<T> e) {
    	CollectionChanged<T>[] listeners = (CollectionChanged<T>[])this["__colListeners"];
		if(listeners == null) return;
		listeners.forEach((CollectionChanged<T> callback, int index, Array<CollectionChanged<T>> array)->{
    		callback(this, e);
    	});
    } 
    
	default void addCollectionChangedListener(CollectionChanged<T> listener) {
		CollectionChanged<T>[] listeners = (CollectionChanged<T>[])this["__colListeners"];
		if(listeners == null){
			this["__colListeners"] = listeners = new Array<CollectionChanged<T>>();
		}
		listeners.push(listener);
	}

	default void removeCollectionChangedListener(CollectionChanged<T> listener) {
		CollectionChanged<T>[] listeners = (CollectionChanged<T>[])this["__colListeners"];
		if(listeners == null) return;
		listeners.forEach((CollectionChanged<T> listener1, int index, Array<CollectionChanged<T>> array)->{
			if(listener1 === listener){
				array.splice(index, 1);
			}
		});
	}
} 

public function void CollectionChanged<T>(Object sender, CollectionChangedEvent<T> event);

public enum CollectionChangedAction{
	Add,
	Move,
	Remove,
	Replace,
	Reset;
}

// Arguments for the CollectionChanged event.
// A collection that supports INotifyCollectionChanged This raises this event
// whenever an item is added or removed, or when the contents of the collection 
// changes dramatically.
public class CollectionChangedEvent<T> // extends EventArgs
{ 

  private CollectionChangedAction _action; 
  private Array<T> _newItems, _oldItems;
  private int _newStartingIndex = -1;
  private int _oldStartingIndex = -1;
  
  // Construct a NotifyCollectionChangedEventArgs that describes a reset change.
  // <param name="action">The action that caused the event (must be Reset).</param>
  @Overload("1")
  public CollectionChangedEvent(CollectionChangedAction action) {
      if (action != CollectionChangedAction.Reset) 
          throw new Error(0, "Action must be CollectionChangedAction.Reset");

      initializeAdd(action, null, -1); 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
  /// <param name="action">The action that caused the event; can only be Reset, Add or Remove action.</param> 
  /// <param name="changedItem">The item affected by the change.</param>
  @Overload("2")
  public CollectionChangedEvent(CollectionChangedAction action, T changedItem) { 
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove)
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Reset or CollectionChangedAction.Remove");

      if (action == CollectionChangedAction.Reset)
      { 
          if (changedItem != null)
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          initializeAddOrRemove(action, (java.lang.Array<T>) new Object[]{changedItem}, -1);
      } 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item change.
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItem">The item affected by the change.</param>
  /// <param name="index">The index where the change occurred.</param>
  @Overload("3")
  public CollectionChangedEvent(CollectionChangedAction action, T changedItem, int index) 
  {
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove) 
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset");

      if (action == CollectionChangedAction.Reset)
      {
          if (changedItem != null)
              throw new Error(0, "ResetAction requires null changedItems"); 
          if (index != -1)
              throw new Error(0, "ResetAction requires index minus 1"); 

          initializeAdd(action, null, -1);
      } 
      else
      {
          initializeAddOrRemove(action, (java.lang.Array<T>) new Object[]{changedItem}, index);
      } 
  }

  /// <summary> 
  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item change.
  /// </summary> 
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItems">The items affected by the change.</param>
  @Overload("4")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems)
  { 
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove)
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be CollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset"); 

      if (action == CollectionChangedAction.Reset) 
      {
          if (changedItems != null)
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAdd(action, null, -1);
      } 
      else 
      {
          if (changedItems == null) 
              throw new Error(0, "ResetAction requires null changedItems"); 

          initializeAddOrRemove(action, changedItems, -1);
      } 
  }

  /// <summary> 
  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item change (or a reset).
  /// </summary> 
  /// <param name="action">The action that caused the event.</param>
  /// <param name="changedItems">The items affected by the change.</param>
  /// <param name="startingIndex">The index where the change occurred.</param>
  @Overload("5")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems, int startingIndex) {
      if ((action != CollectionChangedAction.Add) && (action != CollectionChangedAction.Remove) 
              && (action != CollectionChangedAction.Reset)) 
          throw new Error(0, "Action must be NotifyCollectionChangedAction.Add or CollectionChangedAction.Remove or CollectionChangedAction.Reset");

      if (action == CollectionChangedAction.Reset) {
          if (changedItems != null)
              throw new Error(0, "ResetAction requires null changedItems"); 
          if (startingIndex != -1)
              throw new Error(0, "ResetAction requires index minus 1"); 

          initializeAdd(action, null, -1);
      } else {
          if (changedItems == null)
              throw new Error(0, "changedItems may not be null!"); 
          if (startingIndex < -1)
              throw new Error(0, "Index cannot be negative"); 

          initializeAddOrRemove(action, changedItems, startingIndex);
      } 
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param> 
  /// <param name="newItem">The new item replacing the original item.</param> 
  /// <param name="oldItem">The original item that is replaced.</param>
  @Overload("6")
  public CollectionChangedEvent(CollectionChangedAction action, T newItem, T oldItem) {
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be NotifyCollectionChangedAction.Replace");

      initializeMoveOrReplace(action, (Array<T>)new Object[]{newItem}, (Array<T>)new Object[]{oldItem}, -1, -1);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItem">The new item replacing the original item.</param>
  /// <param name="oldItem">The original item that is replaced.</param>
  /// <param name="index">The index of the item being replaced.</param>
  @Overload("7")
  public CollectionChangedEvent(CollectionChangedAction action, T newItem, T oldItem, int index) { 
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be CollectionChangedAction.Replace"); 

      initializeMoveOrReplace(action, (Array<T>)new Object[]{newItem}, (Array<T>)new Object[]{oldItem}, index, index);
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItems">The new items replacing the original items.</param> 
  /// <param name="oldItems">The original items that are replaced.</param>
  @Overload("8")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems) {
      if (action != CollectionChangedAction.Replace) 
          throw new Error(0, "Action must be CollectionChangedAction.Replace");
      if (newItems == null) 
          throw new Error(0, "changedItems may not be null!"); 
      if (oldItems == null)
          throw new Error(0, "oldItems may not be null!"); 

      initializeMoveOrReplace(action, newItems, oldItems, -1, -1);
  }

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Replace event. 
  /// <param name="action">Can only be a Replace action.</param>
  /// <param name="newItems">The new items replacing the original items.</param> 
  /// <param name="oldItems">The original items that are replaced.</param>
  /// <param name="startingIndex">The starting index of the items being replaced.</param>
  @Overload("9")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int startingIndex)
  { 
      if (action != CollectionChangedAction.Replace)
          throw new Error(0, "Action must be CollectionChangedAction.Replace"); 
      if (newItems == null) 
          throw new Error(0, "changedItems may not be null!"); 
      if (oldItems == null) 
          throw new Error(0, "oldItems may not be null!"); 

      initializeMoveOrReplace(action, newItems, oldItems, startingIndex, startingIndex);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a one-item Move event. 
  /// <param name="action">Can only be a Move action.</param> 
  /// <param name="changedItem">The item affected by the change.</param>
  /// <param name="index">The new index for the changed item.</param>
  /// <param name="oldIndex">The old index for the changed item.</param>
  @Overload("10")
  public CollectionChangedEvent(CollectionChangedAction action, Object changedItem, int index, int oldIndex) {
      if (action != CollectionChangedAction.Move) 
          throw new Error(0, "Action must be CollectionChangedAction.Move"); 
      if (index < 0)
      	throw new Error(0, "Index cannot be negative"); 

      Array<T> changedItems= new Array<T>(changedItem);
      initializeMoveOrReplace(action, changedItems, changedItems, index, oldIndex);
  } 

  /// Construct a NotifyCollectionChangedEventArgs that describes a multi-item Move event. 
  /// <param name="action">The action that caused the event.</param> 
  /// <param name="changedItems">The items affected by the change.</param>
  /// <param name="index">The new index for the changed items.</param>
  /// <param name="oldIndex">The old index for the changed items.</param>
  @Overload("11")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> changedItems, int index, int oldIndex) {
      if (action != CollectionChangedAction.Move) 
          throw new Error(0, "Action must be CollectionChangedAction.Move"); 
      if (index < 0)
          throw new Error(0, "Index cannot be negative"); 

      initializeMoveOrReplace(action, changedItems, changedItems, index, oldIndex);
  }

  /// Construct a NotifyCollectionChangedEventArgs with given fields (no validation). Used by WinRT marshaling. 
  @Overload("12")
  public CollectionChangedEvent(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int newIndex, int oldIndex) { 
      _action = action;
      _newItems = (newItems == null) ? null : newItems;
      _oldItems = (oldItems == null) ? null : oldItems;
      _newStartingIndex = newIndex; 
      _oldStartingIndex = oldIndex;
  } 

  private void initializeAddOrRemove(CollectionChangedAction action, Array<T> changedItems, int startingIndex) { 
      if (action == CollectionChangedAction.Add)
          initializeAdd(action, changedItems, startingIndex);
      else if (action == CollectionChangedAction.Remove)
          initializeRemove(action, changedItems, startingIndex); 
  } 

  private void initializeAdd(CollectionChangedAction action, Array<T> newItems, int newStartingIndex) {
      _action = action;
      _newItems = newItems;
      _newStartingIndex = newStartingIndex; 
  }

  private void initializeRemove(CollectionChangedAction action, Array<T> oldItems, int oldStartingIndex) {
      _action = action; 
      _oldItems = oldItems;
      _oldStartingIndex= oldStartingIndex;
  }

  private void initializeMoveOrReplace(CollectionChangedAction action, Array<T> newItems, Array<T> oldItems, int startingIndex, int oldStartingIndex) { 
      initializeAdd(action, newItems, startingIndex); 
      initializeRemove(action, oldItems, oldStartingIndex);
  } 

  /// The action that caused the event. 
  public CollectionChangedAction action {
      & { return _action; } 
  }

  /// The items affected by the change.
  public Array<T> newItems {
      & { return _newItems; }
  } 

  /// The old items affected by the change (for Replace events). 
  public Array<T> oldItems {
      & { return _oldItems; }
  }

  /// The index where the change occurred. 
  public int newStartingIndex { 
      & { return _newStartingIndex; }
  }

  /// The old index where the change occurred (for Move events).
  public int oldStartingIndex {
      & { return _oldStartingIndex; } 
  }

} 

public class PropertyChangeEvent {
    private final String _property;
    
    public PropertyChangeEvent(String property) {
        this._property = property;
    }

    public String property{
    	&{ 
    		return this._property; 
    	}
    }
}
  
public interface MarkupExtension {
	public void inject (Bindable target, String[] properties);
}

public enum UpdateSourceTrigger {
    /**
     * Update whenever the target property changes 
     */
    PropertyChanged,
    /**
     * Update only when target element loses focus, or when Binding deactivates
     */
    LostFocus,
    /**
     * Update only by explicit call to BindingExpression.UpdateSource() 
     */
    Explicit
}  

public enum BindingMode {
    /**
     * Data flows from source to target and vice-versa
     */
    TwoWay, 
    /**
     * Data flows from source to target, source changes cause data flow
     */
    OneWay,
    /**
     * Data flows from source to target once, source changes are ignored 
     */
    OneTime;
} 

public function void UpdateTargetCallback(Object target, String[] property, Object value);
public function void UpdateSourceCallback(Object source, String property, Object value);

public final class Binding implements MarkupExtension, PropertyChangeListener {
	private String _context;
	private String	_property; 
	private Bindable _target;
	private BindingMode _mode;
	private UpdateSourceTrigger _trigger;
	private boolean _trace;
	private String[] _targetProperties;
	private UpdateTargetCallback _updateTargetCallback;
	private UpdateSourceCallback _updateSourceCallback;
	private ConverterFunction _converteTo;
	private ConverterFunction _converteFrom;

	public Binding(Object options) {
		if(options["property"] != undefined){
			this._property = (String) options["property"];
		}
		
		if(options["trace"] != undefined){
			this._trace = (boolean) options["trace"];
		}
		
		if(options["mode"] != undefined){
			this._mode = (BindingMode) options["mode"];
		} else {
			this._mode = BindingMode.OneTime;
		}
		
		if(options["context"] != undefined){
			this._context = (String) options["context"];
		} else {
			this._context = "ROOT";
		}
		
		if(options["trigger"] != undefined){
			this._trigger = (UpdateSourceTrigger) options["trigger"];
		} else {
			this._trigger = UpdateSourceTrigger.LostFocus;
		}
		
		if(options["updateTargetCallback"] != undefined){
			this._updateTargetCallback = (UpdateTargetCallback) options["updateTargetCallback"];
		}
		
		if(options["updateSourceCallback"] != undefined){
			this._updateSourceCallback = (UpdateSourceCallback) options["updateSourceCallback"];
		}
		
		if(options["converteTo"] != undefined){
			this._converteTo = ((ConverterFunction) options["converteTo"]);
		}
		
		if(options["converteFrom"] != undefined){
			this._converteFrom = ((ConverterFunction) options["converteFrom"]);
		}
	} 

	public String property {
		& { 
			return _property; 
		} 
		+ {
			_property = value;
		} 
	} 
	
	public String[] targetProperties {
		& { 
			return _targetProperties; 
		} 
		+ {
			_targetProperties = value;
		} 
	} 
	 
	public boolean trace {
		& {
			return _trace; 
		} 
		+ { 
			this._trace = value; 
		}
	} 

	public BindingMode mode {
		& {
			return _mode; 
		} 
		+ { 
			this._mode = value; 
		}
	} 

	public UpdateSourceTrigger trigger {
		& { 
			return _trigger; 
		}
		+ {
			this._trigger = value;
		} 
	}
	
	public UpdateTargetCallback updateTargetCallback{
		&{
			return this._updateTargetCallback;
		}
		+{
			this._updateTargetCallback = value;
		}
	}
	public UpdateSourceCallback updateSourceCallback{
		&{
			return this._updateSourceCallback;
		}
		+{
			this._updateSourceCallback = value;
		}
	}
	
	public ConverterFunction converteTo{
		&{
			return this._converteTo;
		}
		+{
			this._converteTo = value;
		}
	}
	
	public ConverterFunction converteFrom{
		&{
			return this._converteFrom;
		}
		+{
			this._converteFrom = value;
		}
	}
	
	public String context{
		&{
			return this._context;
		}
		+{
			this._context = value;
		}
	}
	
	public void inject(Bindable target, String[] targetProperties){
		this._target = target;
		this._targetProperties = targetProperties;
		
  		switch(this._mode){
  		case TwoWay:
  			target.attach(this);
  		case OneWay:
  			target.getDataContext(this.context).addBinding(this);
  			((Bindable)target).setBinding(targetProperties, this);
  		case OneTime:
  			target.update(this);
		}
	}
	
	public void unInject(Bindable target){
  		switch(this._mode){
  		case TwoWay:
			target.detach(this);
  		case OneWay:
  			target.removeBinding(this._targetProperties);
  		case OneTime:
  			
		}
	}
	
//	protected void updateTarget(Bindable target, String[] properties, Object data){
//		if(!String.isNullOrEmpty(this.property)){
//			data = data == null ? null : data[this.property];
//		}
//		setTargetProperty(properties, data);
//	}
//	
//	protected void setTargetProperty(String[] properties, Object data){
//		Object tag = this._target;
//		int length = properties.length; 
//		for(int i = 0 ; i < length - 1; i++){
//			if(tag == null) return;
//			tag = tag[properties[i]];
//		}
//		
//		if(this._converterTo != null){
//			data = this._converterTo(data);
//		}
//		
//		Object oldValue = tag[properties[length-1]];
//		if(data === oldValue){
//			return;
//		}
//		
//		if(this._updateTargetCallback != null){
//			this._updateTargetCallback(this._target, properties, data);
//		} else {
//			tag[properties[length-1]] = data;
//		}
//	}

	private PropertyChange _propertyChange = (Object source, PropertyChangeEvent evt)-> {
//		Object data = source;
//		if(!String.isNullOrEmpty(this._property)){
//			data = source[evt.property];
//		}
//		setTargetProperty(_targetProperties, data);
		this._target.update(this);
	};
	
	public PropertyChange propertyChange{
		&{
			return this._propertyChange;
		}
	}
	
	protected Object getProperty(Node target, String[] properties){
		Object result = target;
		int length = properties.length;
		for(int index = 0 ; index < length - 1; index++){
			if(result == null) return null;
			result = result[properties[index]];
		}
		return result[properties[length-1]];
	}

//	protected void attachTarget(HTMLElement target){
//		// listen for lost focus and input 
//		switch(this._trigger) { 
//			case LostFocus:
//				target.addEventListener("blur", this.updateSource, false);
//				break; 
//			case PropertyChanged: 
//				target.addEventListener("input", this.updateSource, false);
//				target.addEventListener("change", this.updateSource, false);
//				break;
//			default:
//		}  
//	}
	
	public EventHandler updateSource = (Event event) ->{
		Object value = getProperty((Node)event.target, this._targetProperties);
		if(this._converteFrom != null){
			value = this._converteFrom(value);
		}
		return this._target.getDataContext(this._context).updateSource(this._property, value, this._updateSourceCallback);
	};

	public void reset() {
		if(this.context != null){
			DataContext ancestor = this._target.getDataContext(this.context);
			if(ancestor != null){
				ancestor.removeBinding(this);
			}
		} else {
			DataContext ancestor = this._target.getDataContext("ROOT");
			if(ancestor != null){
				ancestor.removeBinding(this);
			}
		}
		this._target.detach(this);
	}
	
//	protected void detachTarget(HTMLElement target){
//		// listen for lost focus and input 
//		switch(this._trigger) { 
//			case LostFocus:
//				target.removeEventListener("blur", this.updateSource, false);
//				break; 
//			case PropertyChanged: 
//				target.removeEventListener("input", this.updateSource, false);
//				target.removeEventListener("change", this.updateSource, false);
//				break;
//			default:
//		}  
//	} 
}
public function Object ConverterFunction(Object data);

public final class DataContext implements PropertyChangeListener, INotifyPropertyChanged, MarkupExtension{  
	private String _name;
	private String _property;
	private String _ancestor;
	private Binding[] _bindings = {};
	private Array<DataContext> _dependents = new Array<DataContext>();
	private Object _dataItem;
	
	public DataContext(Object options){
		if(options["property"] != undefined){
			this._property = (String) options["property"];
		}
		
		if(options["dataItem"] != undefined){
			this._dataItem = options["dataItem"];
		}
		
		if(options["name"] != undefined){
			this._name = (String) options["name"];
		} else {
			throw new Error(0, "DataContext name may not be null!");
		}
		
		if(options["ancestor"] != undefined){
			this._ancestor = (String) options["ancestor"];
		} else {
			if(this._name != "ROOT")
				this._ancestor = "ROOT";
		}
	}
	
	public String name{
		&{
			return this._name;
		}
		+{
			if(value === this._name)
				return;

			this._name = value;
		}
	}
	
	public String property{
		&{
			return this._ancestor; 
		}
		+{
			this._ancestor = value;
		}
	}
	
	public String ancestor{
		&{
			return this._property; 
		}
		+{
			this._property = value;
		}
	}
	
	public Object dataItem{
		&{
			return this._dataItem;
		}
		+{
			if(value === this._dataItem)
				return;

			replaceDataItem(value); 
			this._dataItem = value;
			dirty(value);
		}
	}
	
	public void inject(Bindable target, String[] properties){
		target.addDataContext(this);
	}
	
	public void addBinding(Binding binding){ 
		_bindings.push(binding);
		if(String.isNullOrEmpty(binding.property)){
			this.addPropertyChangeListener("dataItem", binding.propertyChange);
			if(binding.trace){
				if(this._dataItem instanceof INotifyPropertyChanged){
					((INotifyPropertyChanged) this._dataItem).addAllPropertyChangeListener(binding.propertyChange);
				}
			}
		} else {
			if(this._dataItem instanceof INotifyPropertyChanged){
				((INotifyPropertyChanged) this._dataItem).addPropertyChangeListener(binding.property, binding.propertyChange);
			}
		}
	}
	
	public void removeBinding(Binding binding){
		_bindings.forEach((Binding be, int index, Array<Binding> array)->{
			if(be == binding){
				_bindings.splice(index, 1);
				return;
			}
		});
		
		if(String.isNullOrEmpty(binding.property)){
			this.removePropertyChangeListener("dataItem", binding.propertyChange);
			if(binding.trace){
				this.removeAllPropertyChangeListener(binding.propertyChange);
			}
		} else {
			if(this._dataItem instanceof INotifyPropertyChanged){
				((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(binding.property, binding.propertyChange);
			}
		}
	}
	
	public void addDependent(DataContext dependent){ 
		_dependents.push(dependent);
		
		if(this._dataItem != null){
			dependent.dataItem = this.dataItem[dependent.property];
		} else {
			dependent.dataItem = null;
		}
	}
	
	public void removeDependent(DataContext dependent){
		_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
			if(dc == dependent){
				_dependents.splice(index, 1);
			}
		});
	}
	
	public void moveDependentTo(DataContext target){
		//TODO
	}
	
	public void clearDependents(){
		//TODO
	}
	
	protected void dirty(Object data){
		_bindings.forEach((Binding binding, int index, Array<Binding> array)->{
			binding.propertyChange(this.dataItem, new PropertyChangeEvent(binding.property));
		});
		
		_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
			dc.propertyChange(this.dataItem, new PropertyChangeEvent(dc.property));
		});
	}
	 
	protected void replaceDataItem(Object newDataItem){
		if(this._dataItem != null && this._dataItem instanceof INotifyPropertyChanged){  
			INotifyPropertyChanged oldPc = (INotifyPropertyChanged) this._dataItem;
			_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
				oldPc.removePropertyChangeListener(dc.property, dc.propertyChange);
			});
			
			for(int i=0, length = _bindings.length; i<length; i++){
				oldPc.removePropertyChangeListener(_bindings[i].property, _bindings[i].propertyChange);
			}
		}
		
		if(newDataItem != null && newDataItem instanceof INotifyPropertyChanged){
			INotifyPropertyChanged newPc = (INotifyPropertyChanged) newDataItem;
			_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
				newPc.addPropertyChangeListener(dc.property, dc.propertyChange);
			});
			
			for(int i=0, length = _bindings.length; i<length; i++){
				newPc.addPropertyChangeListener(_bindings[i].property, _bindings[i].propertyChange);
			}
		}
	}

	private PropertyChange _propertyChange = (Object source, PropertyChangeEvent e) -> {
		Object superior = source[e.property];
		if(superior == null){
			this.dataItem = null;
		} else {
			this.dataItem = superior[this.property];
		}
	};
	
	public PropertyChange propertyChange{
		&{
			return this._propertyChange;
		}
	}
	
	protected boolean updateSource(String property, Object data, UpdateSourceCallback callback){
		if(this.dataItem === data){
			return true;
		}
		
		if(callback != null){
			callback(this._dataItem, property, data);
		} else {
			if(this._dataItem == null){
				return true;
			}
			
			this._dataItem[property] = data;
		}
		
		return true;
	}

	public void reset(Bindable target) {
//		_bindings.forEach((Binding binding, int index, Array<Binding> array)->{
//			if(String.isNullOrEmpty(binding.property)){
//				this.removePropertyChangeListener("dataItem", binding.propertyChange);
//			} else {
//				if(this._dataItem instanceof INotifyPropertyChanged){
//					((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(binding.property, binding.propertyChange);
//				}
//			}
//		});
//		_bindings.length = 0;
		
//		_dependents.forEach((DataContext dc, int index, Array<DataContext> array)->{
//			if(String.isNullOrEmpty(dc.property)){
//				this.removePropertyChangeListener("dataItem", dc.propertyChange);
//			} else {
//				if(this._dataItem instanceof INotifyPropertyChanged){
//					((INotifyPropertyChanged) this._dataItem).removePropertyChangeListener(dc.property, dc.propertyChange);
//				}
//			}
//		});
//		_dependents.length = 0;
		
		if(this.ancestor != null){
			DataContext ancestor = target.getDataContext(this.ancestor);
			if(ancestor != null){
				ancestor.removeDependent(this);
			}
		} else {
			DataContext ancestor = target.getDataContext("ROOT");
			if(ancestor != null){
				ancestor.removeDependent(this);
			}
		}
	}
}

/**
 * 
 * @author cym
 * 
 */
public abstract class Template extends AbstractBindable{
	
	protected Template(Bindable parent){
		super(parent);
		
		Object options = new Object();
		options["name"] = "TEMPLATE";
		options["dataItem"] = this;
		addDataContext(new DataContext(options));
	}
	
	public final void body(){
		doBody();
	}
	
	protected void doBody(){
		
	}

	public void removeBody(Bindable parent) {
		this._childs.forEach((Bindable node, int index, Array<Bindable> array)->{
//			parent.removeChild(node);
		});
	}
	
	protected void before(){
		
	}
	
	protected Bindable after(Bindable node){
		return node;
	}
}

public class Router implements MarkupExtension{
	private Class<Page> _page;
	public Router(Object options){
		if(options["page"] != undefined){
			this._page = (Class<Page>) options["page"];
		}
	}
	
	public Class<Page> page{
		&{
			return this._page;
		}
		+{
			this._page = value;
		}
	}
	@Override
	public  void inject(Bindable target, String[] properties) {
//		((HTMLAnchorElement)target).route = this;
	}
}

//public function void ItemHandler(Bindable parent, int index, Iterator.LoopStatus status);

public class Iterator extends AbstractBindable{
	private Object _items;
	private Object[] _datas = new Array<Object>();
	
	private LoopStatus _status;
	
	private int _begin;
	private int _end;
	private int _step;
	private boolean _trace;  //trace ObjserableCollection
	
	public Iterator(Bindable parent){
		super(parent);
		
		this._status = new LoopStatus();
		Object options = new Object();
		options["name"] = "status";
		options["dataItem"] = this._status;
		this.addDataContext(new DataContext(options));
	}
	
	//begin 属性值  
	public int begin{
		&{
			return this._begin;
		}
		+{
			this._begin = value;
		}
	} 
	//end 属性值  
	public int end{
		&{
			return this._end;
		}
		+{
			this._end = value;
		}
	}
	 //step
	public int step{
		&{
			return this._step;
		}
		+{
			this._step = value;
		}
	}
	
	public Object items{
		&{
			return this._items;
		}
		+{
			this._items = value;
		}
	}
	
	private Item createItem(Object data){
		Item item = new Item(this.parentNode);
		Object options = new Object();
		options["name"] = "current";
		options["dataItem"] = data;
		item.addDataContext(new DataContext(options));
		return item;
	}
	
	@Override
	public void doBody(){
		if(items != null){
			if(items instanceof Collection){
				int index = 0, size = ((Collection) items).size;
				for(Object obj : (Collection)items){
					this._datas.push(obj);
					
					Item item = createItem(obj);
					this.processChild(item);
					
					this._status.index = index;

					if(index++ < this._begin){
						continue;
					}
					if(!this._status._first){
						this._status._first = true;
					} else {
						this._status._first = false;
					}
					
					this._status.count ++;
					this._status.current = obj;
					if(index == end || index == size){
						this._status._last = true;
					}
					this.bodyHandler.call(item);
					if(index == end){
						break;
					}
				}
				
				if(items instanceof ObservableCollection<?>){
					((ObservableCollection) items).addCollectionChangedListener(this.onCollectionChanged);
				}
			}
		} else if(this._end > -1){
			for(int i= this._begin, index=0; i<this._end; i+=this._step){
				Item item = createItem(null);
				this.processChild(item);
				this._status.index = index ++  ;
				if(i == this._begin){
					this._status.first = true;
				} else {
					this._status.first = false;
				}
				
				if(i + this._step > this._end){
					this._status.last = true;
				} else {
					this._status.last = false;
				}
				this._status.count ++ ;
				this.bodyHandler.call(item);
			}
		}
	}
	
	protected CollectionChanged<Object> onCollectionChanged = (Object sender, CollectionChangedEvent<Object> event) ->{
		switch(event.action){
		case Add:
			Array<?> items = event.newItems;
			if(items == null || items.length <= 0){
				break;
			}
			int start = event.newStartingIndex;
			for(Object obj : items){
				Item item = createItem(obj);
				this.processChild(item);
				
				this._status.count ++;
				this._status.index ++;
				this._status.current = obj;
				this.bodyHandler.call(item);
			} 
			break;
//		case Reset:
//			undoTemplate();
//			break;
		case Remove:
			items = event.oldItems;
			if(items == null || items.length <= 0){
				break;
			}
			
			Bindable[] toBeRemove = new Array<Bindable>();
			for(int i=0,length=items.length;i<length;i++){
				for(int j=0,size=this._childs.length;j<size;j++){
					if(this._childs[j].getDataContext("current").dataItem == items[i]){
						toBeRemove.push(this._childs[j]);
					}
				}
			}
			
			for(int i =0, lengt = toBeRemove.length; i<length;i++){
				this._status.count--;
				this._status._index--;
				toBeRemove[i].reset();
			}
			break;
//		case Replace:
//			Object newItem = event.newItems[0], old = event.oldItems[0];
//			Template oldTemp = itemsMap.get(old);
//			Template newTemp = createTemplate(newItem);
//			if(newTemp ==null || newTemp.getClass().id != oldTemp.getClass().id){
//				oldTemp.removeDOMTree(this._container);
//				newTemp.buildDOMTree(this._container, newItem,  event.newStartingIndex);
//			}
//		case Move:
			
		}
	};
	
	class LoopStatus {
		private Object _current;
		private int _index = 0;
		private boolean _first;
		private boolean _last;
		private int _count = 1;
//		private int _begin;
//		private int _end;
//		private int _step;
		
		//当前这次迭代的（集合中的）项 
		public Object current{
			&{
				return this._current;
			}
			+{
				this._current = value;
			}
		}
		//当前这次迭代从 0 开始的迭代索引  
		public int index{
			&{
				return this._index;
			}
			+{
				this._index = value;
			}
		}
		//当前这次迭代从 1 开始的迭代计数
		public int count{
			&{
				return this._count;
			}
			+{
				this._count = value;
			}
		}
		
		//用来表明当前这轮迭代是否为第一次迭代的标志  
		public boolean first{
			&{
				return this._first;
			}
			+{
				this._first = value;
			}
		}
		
		//用来表明当前这轮迭代是否为最后一次迭代的标志  
		public boolean last{
			&{
				return this._last;
			}
			+{
				this._last = value;
			}
		} 
		
		//begin 属性值
		public int begin{
			&{
				return Iterator.this._begin;
			}
		}
		//end 属性值
		public int end{
			&{
				return Iterator.this._end;
			}
		}
		
		//step
		public int step{
			&{
				return Iterator.this._step;
			} 
		} 
	}
	
	class Item extends AbstractBindable{
		Item(Bindable parent){
			super(parent);
		}
	}
}

public class Choose extends AbstractBindable{
	private Object _data;
	private ConverterFunction _converter;
	private boolean _otherwise = true;
	public Choose(Bindable parent){
		super(parent);
	}
	
	public Object data{
		&{
			return this._data;
		}
		+{
			this._data = value;
		}
	}
	
	public ConverterFunction converter{
		&{
			return this._converter;
		}
		+{
			this._converter = value;
		}
	}
	public boolean test(Object value) {
		if(this._data == null){
			return false;
		}
		
		boolean result = false;
		if(this._converter != null){
			result =  this._converter(this._data) == value;
		} else {
			result = this._data == value;
		}
		
		if(result){
			this._otherwise = false;
		}
		
		return result;
	}

}

public function boolean TestCallback(Object data);
public final class When extends AbstractBindable{
	private Object _value;
	
	public When(Bindable parent){
		super(parent);
	}
	
	public Object value{
		&{
			return this._value;
		}
		+{
			this._value = value;
		}
	}
	
	@Override
	protected void doBody(){
		if(this._value == null ){
			return;
		} 
		
		if(!(this.logicParent instanceof Choose)){
			return;
		}
		
		Choose choose = (Choose) this.logicParent;
		if(choose.test(this.value)){
			this.bodyHandler(parent);
		}
	}
}

public final class Otherwise extends AbstractBindable{
	public Otherwise(Bindable parent){
		super(parent);
	}
	
	@Override
	protected void doBody(){
		if(!(this.logicParent instanceof Choose)){
			return;
		}
		
		Choose choose = (Choose) this.logicParent;
		if((boolean)choose["_otherwise"]){
			this.bodyHandler(parent);
		}
	}
}

public final class If extends AbstractBindable{
	private Object _data;
	private TestCallback _test;
	public If(Bindable parent){
		super(parent);
	}
	public Object data{
		&{
			return this._data;
		}
		+{
			this._data = value;
		}
	}
	
	public TestCallback test{
		&{
			return this._test;
		}
		+{
			this._test = value;
		}
	}
	
	@Override
	protected void doBody(){
		if(this._test == null ){
			if((Boolean)this._data){
				this.bodyHandler(parent);
			}
		} else {
			if(this._test()){
				this.bodyHandler(parent);
			}
		}
	}
}

public class ParameterBinding implements MarkupExtension{
	private String _context;
	private String _property;
	
	public String context{
		&{
			return this._context;
		}
		+{
			this._context = value;
		}
	}
	
	public String property{
		&{
			return this._property;
		}
		+{
			this._property = value;
		}
	}
	@Override
	public void inject(Bindable target, Array<String> properties) {
		// TODO Auto-generated method stub
	}
	
}

public interface Parameters /*extends MarkupExtension*/{
	default String URL(){
		return "";}
	default void inject(HTMLAnchorElement a, String property, ParameterBinding[] bindings){
		
	}
}

public class ProxyPrrameter implements Parameters{
	private Class<Page> _page;
	private HTMLAnchorElement _target;
	private Map<String, String> _parameters = new Map<String, String>();
	public ProxyPrrameter(ParameterBinding[] bindings){
		if(bindings != null){
			bindings.forEach((ParameterBinding value, int index, Array<ParameterBinding> array)->{
				
			});
		}
	}

	@Override
	public String URL() {
		String r = "";
		boolean and = false;
		_parameters.forEach((String value, String key, Map<String,String> _this)->{
			if(and){
				key += '&';
			}
			key = key + '=' + encodeURIComponent(value);
			and = true;
		});
		return r;
	}
	

	@Override
	public void inject(HTMLAnchorElement a, String prop, Array<ParameterBinding> bindings) {
		this._target = a;
		if(bindings != null){
			bindings.forEach((ParameterBinding binding, int index, Array<ParameterBinding> array)->{
				update(binding);
			});
//			this._target.href = _page.toURL() + "?" + URL(); //TODO
		}
	}

	private void update(ParameterBinding binding) {
		DataContext context = this._target.getDataContext(binding.context);
		_parameters.set(binding.context,(String)context[binding.property]);
	}
}

/**
 * a html page
 */
public interface Page extends Parameters{
	default String encodeRequest(Map<String, String> parameters){
		String r = "";
		boolean and = false;
		parameters.forEach((String value, String key, Map<String,String> _this)->{
			if(and){
				key += '&';
			}
			key = key + '=' + encodeURIComponent(value);
			and = true;
		});
		return r;
		
	}
	default Map<String, String> getRequestParameter(String search){
		Map<String, String> result = new Map<String, String>();
		if(String.isNullOrEmpty(location.search)){
			return null;
		}
		String[] parts = search.split("&");
		parts.forEach((String value, int index, String[] _this)->{
			String[] assign = value.split("=");
			result.set(assign[0], assign[1]);
		});
		return result;
	}
	
	default String toURL(){
		return this.getClass().toURL();
	}
}


@Module
package java.util;

import java.util.List;

public class ObservableCollection<T> extends ArrayList<T> implements INotifyCollectionChanged<T>, List<T>, INotifyPropertyChanged { 
	public static final String SIZE = "size";
    
    @Overload("0")
    public ObservableCollection()  { super(); } 

    @Overload("1") 
    public ObservableCollection(List<T> list) {
        copyFrom(list);
    } 

    @Overload("2")
    public ObservableCollection(Iterable<T> collection) {
        if (collection == null) 
            throw new Error(0, "collection may not be null!");

        copyFrom(collection);
    } 

    private void copyFrom(Iterable<T> collection) { 
        if (collection != null) {
            Iterator<T> enumerator = collection.iterator();
            while (enumerator.hasNext()) {
                this.add(enumerator.next()); 
            } 
        } 
    }

    // Move item at oldIndex to newIndex. 
    public void move(int oldIndex, int newIndex) { 
        moveItem(oldIndex, newIndex);
    }

    // Called by base class Collection&lt;T&gt; when the list is being cleared;
    // raises a CollectionChanged event to any listeners. 
    public void clear() { 
        super.clear(); 
        notifyChanged(SIZE);
        onCollectionReset();
    } 

    // Called by base class Collection&lt;T&gt; when an item is removed from list; 
    // raises a CollectionChanged event to any listeners.
    public T removeAt(int index) {
        T removedItem  = this.get(index); 

        super.removeAt(index); 

        notifyChanged(SIZE);
        onCollectionChanged3(CollectionChangedAction.Remove, removedItem, index);
		return removedItem;
    }
    
    public boolean remove(Object o){
    	if(super.remove(o)){
    		notifyChanged(SIZE);
            onCollectionChanged3(CollectionChangedAction.Remove, (T) o, -1);
            return true;
    	};
		return false;
    }
    
    public void add(T t){
    	super.add(t);
		int i = this.size;  
		notifyChanged(SIZE);
        onCollectionChanged3(CollectionChangedAction.Add, t, -1);
    }

    // Called by base class Collection&lt;T&gt; when an item is added to list;
    // raises a CollectionChanged event to any listeners. 
    public void addAt(int index, T item){ 
        super.addAt(index, item);

        notifyChanged(SIZE);
        onCollectionChanged3(CollectionChangedAction.Add, item, index); 
    } 
    
    @Override
    public void addAll(Collection<? extends T> c) {
    	this.addAllAt(0, c);
    }
    
    @Override
    public void addAllAt(int index, Collection<? extends T> c) {
    	super.addAllAt(index, c);
    	onCollectionChanged(new CollectionChangedEvent(CollectionChangedAction.Add, c.toArray(), index)); 
    }
    
	@Override
    public void removeAll(Collection<?> c) {
    	super.removeAll(c);
    	onCollectionChanged(new CollectionChangedEvent(CollectionChangedAction.Remove, c.toArray(), 0)); 
    }

    // Called by base class Collection&lt;T&gt; when an item is set in list;
    // raises a CollectionChanged event to any listeners.
    public T set(int index, T item) {
        T originalItem = this.get(index); 
        super.set(index, item);

        notifyChanged(SIZE);
        onCollectionChanged41(CollectionChangedAction.Replace, originalItem, item, index);
		return originalItem;
    }

    // Called by base class ObservableCollection&lt;T&gt; when an item is to be moved within the list; 
    // raises a CollectionChanged event to any listeners. 
    protected void moveItem(int oldIndex, int newIndex){
        T removedItem = super.removeAt(oldIndex); 
        super.addAt(newIndex, removedItem);  

        onCollectionChanged4(CollectionChangedAction.Move, removedItem, newIndex, oldIndex);
    }

    // Helper to raise CollectionChanged event to any listeners 
    private void onCollectionChanged3(CollectionChangedAction action, T item, int index) { 
        onCollectionChanged(new CollectionChangedEvent<T>(action, item, index));
    }

    // Helper to raise CollectionChanged event to any listeners
    private void onCollectionChanged4(CollectionChangedAction action, T item, int index, int oldIndex) {
        onCollectionChanged(new CollectionChangedEvent<T>(action, item, index, oldIndex)); 
    }

    // Helper to raise CollectionChanged event to any listeners 
    private void onCollectionChanged41(CollectionChangedAction action, T oldItem, T newItem, int index) { 
        onCollectionChanged(new CollectionChangedEvent<T>(action, newItem, oldItem, index));
    } 

    // Helper to raise CollectionChanged event with action == Reset to any listeners
    private void onCollectionReset() { 
        onCollectionChanged(new CollectionChangedEvent<T>(CollectionChangedAction.Reset)); 
    }

}

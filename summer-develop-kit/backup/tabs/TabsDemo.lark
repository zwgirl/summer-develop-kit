package tabs;

import java.util.ArrayList;
import java.util.Collection;

import org.w3c.html.body;
import org.w3c.html.div;
import org.w3c.html.head;
import org.w3c.html.html;
import org.w3c.html.meta;
import org.w3c.html.p;
import org.w3c.html.style;
import org.w3c.html.title;
import org.w3c.html.ul;

public class TabsDemo implements INotifyPropertyChanged, PropertyChangeListener {
	<html>
		<head>
		<meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Lark Tabs Demo</title>
		<style type="text/css">
			tabBox .tabs {
			    margin: 0;
			    padding: 0 10px;
			    overflow: hidden;
			    margin-bottom: -1px;
			    height: 2.25em;
			}
		 
			.tabBox .tabs li {
			    float: left;
			    list-style: none;
			    margin: 0;
			    padding: .25em .25em 0;
			    height: 2em;
			    overflow: hidden;
			    position: relative;
			    z-index: 1;
			    border-bottom: 1px solid #FFF;
			}
		
			.tabBox .tabs li.selected {
			    z-index: 3;
			}
		
			.tabBox .tabs a {
			    float: left;
			    height: 2em;
			    line-height: 2em;
			    border-radius: 8px 8px 0 0;
			    background: #EEE;
			    border: 1px solid #CCC;
			    border-bottom: 0;
			    padding: 0 10px;
			    color: #000;
			    text-decoration: none;
			}
		
			.tabBox .tabs .selected a {
			    background: #FFF;
			    box-shadow: #CCC 0 0 .25em;
			}
		
			.tabBox .tabs a:hover {
			    background: linear-gradient(#EEF, #FFF 70%);
			}
		
			.tabBox .content {
			    clear: left;
			    position: relative;
			    z-index: 2;
			    padding: 2em 1em;
			    border: 1px solid #CCC;
			    background: #FFF;
			    border-radius: 3px;
			    box-shadow: #CCC 0 0 .25em;
			}
		</style>
		
		<style>
			#flexContainer { 
			  display: flex;
			  flex-direction: row;
			  align-items: center;
			} 
			.item {
			  width: 120px;
//			  background:#6ABD27;
			  flex: 1 1 auto;
			  vertical-align: middle;
			}
			.item ul {	
				width: 581px;
				color white;
				list-style: none;
				padding-left: 6px;
				padding-right: 0px;
				vertical-align: middle;
			}
			 
//			.item ul li {
//				vertical-align: middle;
//				height: 26px;
//				font-family: "Microsoft", sans-serif;
//				background: url('imagens/botoes-cat/cat-bg.png') no-repeat;
//				color: #fff;
//				font-size: 14px;
//				border: 1px solid white;
//			}

		</style>
		</head>
		<body>
			<div className="tabBox">
			    <ul className="tabs" itemsConfig = {ItemsConfig path = "pages" itemTemplate="TabItemHeader"}>
			    </ul>
			    <div className="content" itemsConfig = {ItemsConfig path = "pages" itemTemplate="TabItemContent"}>
			       
			    </div>
			</div>
		
			<p>
			唐诗精选
			</p>
		</body>
	</html>
	public TabsDemo() {
		this._pages = new ArrayList<Page>();
//		for(int i=0; i<4; i++){
//			if(i==0){
//				this._page = new Page("header" + i, "this is page" + i, true);
//				_pages.add(this._page);
//				this._page.addPropertyChangeListener("selected1", this::propertyChange);
//			} else {
//				Page p = new Page("header" + i, "this is page" + i, false);
//				_pages.add(p);
//				p.addPropertyChangeListener("selected1", this::propertyChange);
//			}
//		}
		Page p = new Page("长恨歌", "this is page" + 1, false);
		_pages.add(p);
		p.poem = new Poem("白居易", "images/th0.jpg", 
							"汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。", 
							"天生丽质难自弃，一朝选在君王侧。回眸一笑百媚生，六宫粉黛无颜色。" ,
							"春寒赐浴华清池，温泉水滑洗凝脂。侍儿扶起娇无力，始是新承恩泽时。" ,
							"云鬓花颜金步摇，芙蓉帐暖度春宵。春宵苦短日高起，从此君王不早朝。");
		p.addPropertyChangeListener("selected1", this::propertyChange);
		p = new Page("送元二使安西", "this is page" + 1, false);
		_pages.add(p);
		p.poem = new Poem("王维", "images/th1.jpg", 
							"渭城朝雨浥轻尘，", 
							"客舍青青柳色新。" ,
							"劝君更尽一杯酒， " ,
							"西出阳关无故人。");
		p.addPropertyChangeListener("selected1", this::propertyChange);
		
		p = new Page("春夜喜雨", "this is page" + 1, false);
		_pages.add(p);
		p.poem = new Poem("杜甫", "images/th2.jpg", 
							"好雨知时节，当春乃发生。", 
							"随风潜入夜，润物细无声。" ,
							"野径云俱黑，江船火独明。" ,
							"晓看红湿处，花重锦官城。");
		p.addPropertyChangeListener("selected1", this::propertyChange);
		
		p = new Page("黄鹤楼送孟浩然之广陵", "this is page" + 1, false);
		_pages.add(p);
		p.poem = new Poem("李白", "images/th3.jpg", 
							"故 人 西 辞 黄 鹤 楼 ，", 
							"烟 花 三 月 下 扬 州 。" ,
							"孤 帆 远 影 碧 空 尽 ，" ,
							"唯 见 长 江 天 际 流 。");
		p.addPropertyChangeListener("selected1", this::propertyChange);
	}
	
	private Collection<Page> _pages;
	public Collection<Page> pages {
		&{
			return this._pages;
		}
		+{
			if(this._pages === value){
				return;
			}
			this._pages = value;
			propertyChanged("pages");
		}
	}
	
	private Page _page;
	
	PropertyChange onSelectedChanged = (Object source, PropertyChangeEvent evt)->{
		if(this._page !== source){
			if(this._page != null){
				_page.selected1 = false;
			}
			this._page = (Page) source;
		}
	};
	
	private Object _listeners = new Object();
	protected void propertyChanged(String propName){
		PropertyChangeEvent event = new PropertyChangeEvent(propName);
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
			h(this, event);
		});
	}
	public void addPropertyChangeListener(String propName, PropertyChange handler){
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			listeners = new Array<PropertyChange>();
			_listeners[propName] = listeners;
		}
		listeners.push(handler);
	}
	
	public void removePropertyChangeListener(String propName, PropertyChange handler){
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
			if(handler === h){
				listeners.splice(index, 1);
			}
		});
	}
	@Override
	public void propertyChange(Object source, PropertyChangeEvent evt) {
		if("selected1" == evt.propertyName){
			onSelectedChanged(source, evt);
		}
		
	}
}

class Page implements INotifyPropertyChanged{
	public Page(String header, String content, boolean selected){
		this._header = header;
		this._content = content;
		this._selected1 = selected;
	}
	
	private String _header;
	public String header {
		&{
			return this._header;
		}
		+{
			if(this._header === value){
				return;
			}
			this._header = value;
			propertyChanged("header");
		}
	}
	
	private String _content;
	public String content {
		&{
			return this._content;
		}
		+{
			if(this._content === value){
				return;
			}
			this._content = value;
			propertyChanged("content");
		}
	}
	
	private boolean _selected1;
	public boolean selected1 {
		&{
			return this._selected1;
		}
		+{
			if(this._selected1 === value){
				return;
			}
			this._selected1 = value;
			
			propertyChanged("selected1");
		}
	}
	
	private Poem _poem;
	public Poem poem {
		&{
			return this._poem;
		}
		+{
			if(this._poem === value){
				return;
			}
			this._poem = value;
			propertyChanged("poem");
		}
	}
	
	private Object _listeners = new Object();
	protected void propertyChanged(String propName){
		PropertyChangeEvent event = new PropertyChangeEvent(propName);
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
			h(this, event);
		});
	}
	public void addPropertyChangeListener(String propName, PropertyChange handler){
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			listeners = new Array<PropertyChange>();
			_listeners[propName] = listeners;
		}
		listeners.push(handler);
	}
	
	public void removePropertyChangeListener(String propName, PropertyChange handler){
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
			if(handler === h){
				listeners.splice(index, 1);
			}
		});
	}
}

class Poem {
	private String _img;
	public String img {
		&{
			return this._img;
		}
		+{
			this._img = value;
		}
	}
	private String _author;
	public String author {
		&{
			return this._author;
		}
		+{
			if(this._author === value){
				return;
			}
			this._author = value;
//			propertyChanged("_author");
		}
	}
	public Poem(String author, String img, String first, String second, String three, String four){
		this._author = author;
		this._img = img;
		this._first = first;
		this._second = second;
		this._three = three;
		this._four = four;
	}
	
	private String _first;
	public String first {
		&{
			return this._first;
		}
		+{
			if(this._first === value){
				return;
			}
			this._first = value;
//			propertyChanged("fist");
		}
	}
	
	private String _second;
	public String second {
		&{
			return this._second;
		}
		+{
			if(this._second === value){
				return;
			}
			this._second = value;
//			propertyChanged("second");
		}
	}
	
	private String _three;
	public String three {
		&{
			return this._three;
		}
		+{
			if(this._three === value){
				return;
			}
			this._three = value;
//			propertyChanged("three");
		}
	}
	private String _four;
	public String four {
		&{
			return this._four;
		}
		+{
			if(this._four === value){
				return;
			}
			this._four = value;
//			propertyChanged("four");
		}
	}
}
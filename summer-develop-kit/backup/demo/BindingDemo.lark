package demo;

import org.w3c.html.body;
import org.w3c.html.datalist;
import org.w3c.html.div;
import org.w3c.html.fieldset;
import org.w3c.html.form;
import org.w3c.html.head;
import org.w3c.html.html;
import org.w3c.html.input;
import org.w3c.html.label;
import org.w3c.html.meta;
import org.w3c.html.option;
import org.w3c.html.progress;
import org.w3c.html.*;
import org.w3c.*;

public class BindingDemo implements INotifyPropertyChanged, PropertyChangeListener{
	<html >
	    <head>
	    	<meta httpEquiv="Content-Type" content="text/html; charset=utf-8" />
	        <title>Binding Demo</title>
	        <style>
		        progress {  
		            background-color: #f3f3f3;  
		            border: 0;  
		            height: 18px;  
		            border-radius: 9px;  
		        } 
		        
		        input[type="range"]::-ms-fill-lower {
		            background-color: lime green;
		        }
		        
		        .rect{
		        	width:5px;
		        	height:5px;
		        	border:5px solid gray;
		        	border-radius: 25px;
		        }
		        
		        .color{
		        	width:115px;
		        	height:115px;
		        	border:5px solid gray;
		        	border-radius: 25px;
		        }
	        </style>
	    </head>
	
	    <body>
	    	<form>
	    		<fieldset>
	    			<progress id="downloadProgress" labels = "datalist" max=100 value = {Binding property="count" mode = "OneWay"}></progress>
	    			输入textfield:<input type="text" placeholder="请输入内容到文本框" />
	    			<datalist id="charles info" style="display:none;">
	    			     <option value="charles wang">charles wang</option>
	    			     <option value="charles_wang888">charles_wang888</option>
	    			     <option value="charles王子">charles王子</option>
	    			</datalist>
	    			
	    			输入数字:<input name="number1" type="number" value={Binding property="count" mode="TwoWay" updateSourceTrigger="PropertyChanged"} min="0" max="100" step="1"/>
	    			选择数值：<input name="range1" type="range" value={Binding property="count" mode="TwoWay" updateSourceTrigger="PropertyChanged"}  min="0"  max="100" step="1"/>
	    			<progress value={Binding property="count" mode="TwoWay" updateSourceTrigger="PropertyChanged"} max="100"></progress>
	    		</fieldset>
	    	</form>
			<div className = "rect" style.width = {Binding property="length" mode="OneWay" callback="callback"}
				style.height = {Binding property="length" mode="OneWay" } >
				<label x:name = "font" style.fontSize = {Binding property="length" mode="OneWay"} textContent = "字体尺寸"/>
			</div>
			
			<input name="red1" type="range" value={Binding property="red" mode="TwoWay" updateSourceTrigger="PropertyChanged"} min="0" max="255" step="1"/>
			<br/>
			<input name="green1" type="range" value={Binding property="green" mode="TwoWay" updateSourceTrigger="PropertyChanged"} min="0" max="255" step="1"/>
			<br/>
			<input name="blue1" type="range" value={Binding property="blue" mode="TwoWay" updateSourceTrigger="PropertyChanged"} min="0" max="255" step="1"/>
			<br/>
			
			<div className="color" style.backgroundColor = {Binding property="color" mode="OneWay"}>
				<span textContent={Binding property="color" mode="OneWay"}> </span>
			</div>
        </body>
	</html>
	public BindingDemo() {
		addPropertyChangeListener("count", this::propertyChange);
		addPropertyChangeListener("red", this::propertyChange);
		addPropertyChangeListener("green", this::propertyChange);
		addPropertyChangeListener("blue", this::propertyChange);
	}
	
	UpdateTargetCallback callback = (Object target, String tagProperty1, String tagProperty2, Object value) ->{
		console.log(value);
		if(this.font != null){
			target[tagProperty1][tagProperty2] = window.getComputedStyle(this.font, null).width;
		}
	};
	
	private int _count;
	public int count {
		&{
			return this._count;
		}
		+{
			if(this._count === value){
				return;
			}
			this._count = value;
			propertyChanged("count");
		}
	}
	
	private String _length;
	public String length {
		&{
			return this._length;
		}
		+{
			if(this._length === value){
				return;
			}
	
			this._length = value;
			propertyChanged("length");
		}
	}
	
	private int _red;
	public int red {
		&{
			return this._red;
		}
		+{
			if(this._red === value){
				return;
			}
			this._red = value;
			propertyChanged("red");
		}
	}
	
	private int _blue;
	public int blue {
		&{
			return this._blue;
		}
		+{
			if(this._blue === value){
				return;
			}
			this._blue = value;
			propertyChanged("blue");
		}
	}
	
	private int _green;
	public int green {
		&{
			return this._green;
		}
		+{
			if(this._green === value){
				return;
			}
			this._green = value;
			propertyChanged("green");
		}
	}
	
	private String _color;
	public String color {
		&{
			return this._color;
		}
		+{
			if(this._color === value){
				return;
			}
			this._color = value;
			propertyChanged("color");
		}
	}
	
	private Object _listeners = new Object();
	protected void propertyChanged(String propName){
		PropertyChangeEvent event = new PropertyChangeEvent(propName);
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
			h(this, event);
		});
	}
	public void addPropertyChangeListener(String propName, PropertyChange handler){
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			listeners = new Array<PropertyChange>();
			_listeners[propName] = listeners;
		}
		listeners.push(handler);
	}
	
	public void removePropertyChangeListener(String propName, PropertyChange handler){
		PropertyChange[] listeners = (PropertyChange[])_listeners[propName];
		if(listeners == null){
			return;
		}
		listeners.forEach((PropertyChange h, int index, Array<PropertyChange> array)->{
			if(handler === h){
				listeners.splice(index, 1);
			}
		}); 
	}
	@Override
	public void propertyChange(Object source, PropertyChangeEvent evt) {
		if(evt.propertyName == "count"){
			this.length = source[evt.propertyName] + "px";
		} else if (evt.propertyName == "red" || evt.propertyName == "green" || evt.propertyName == "blue"){
			this.color = "rgb(" + this._red + "," + this.green + "," + this._blue + ")";
		}
	}
}
